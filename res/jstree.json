[{"tags":[],"description":{"full":"<p>lobals jQuery, define, exports, require, window, document, postMessage<\/p>","summary":"<p>lobals jQuery, define, exports, require, window, document, postMessage<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[],"description":{"full":"<p>jsTree 3.1.1<br \/><a href=\"http:\/\/jstree.com\/\">http:\/\/jstree.com\/<\/a><\/p><p>Copyright (c) 2014 Ivan Bozhanov (<a href=\"http:\/\/vakata.com\">http:\/\/vakata.com<\/a>)<\/p><p>Licensed same as jquery - under the terms of the MIT License<br \/>  <a href=\"http:\/\/www.opensource.org\/licenses\/mit-license.php\">http:\/\/www.opensource.org\/licenses\/mit-license.php<\/a><\/p>","summary":"<p>jsTree 3.1.1<br \/><a href=\"http:\/\/jstree.com\/\">http:\/\/jstree.com\/<\/a><\/p>","body":"<p>Copyright (c) 2014 Ivan Bozhanov (<a href=\"http:\/\/vakata.com\">http:\/\/vakata.com<\/a>)<\/p><p>Licensed same as jquery - under the terms of the MIT License<br \/>  <a href=\"http:\/\/www.opensource.org\/licenses\/mit-license.php\">http:\/\/www.opensource.org\/licenses\/mit-license.php<\/a><\/p>"},"isPrivate":false,"ignore":true},{"tags":[],"description":{"full":"<p>if using jslint please allow for the jQuery global and use following options:<br \/>jslint: browser: true, ass: true, bitwise: true, continue: true, nomen: true, plusplus: true, regexp: true, unparam: true, todo: true, white: true<\/p>","summary":"<p>if using jslint please allow for the jQuery global and use following options:<br \/>jslint: browser: true, ass: true, bitwise: true, continue: true, nomen: true, plusplus: true, regexp: true, unparam: true, todo: true, white: true<\/p>","body":""},"isPrivate":false,"ignore":true},{"tags":[],"description":{"full":"<h3>jsTree core functionality<\/h3>\n","summary":"<h3>jsTree core functionality<\/h3>\n","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree"}],"description":{"full":"<p>holds all jstree related functions and variables, including the actual class and methods to create, access and manipulate instances.<\/p>","summary":"<p>holds all jstree related functions and variables, including the actual class and methods to create, access and manipulate instances.<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"property","receiver":"$","name":"jstree","value":"{","string":"$.jstree"}},{"tags":[{"type":"name","string":"$.jstree.version"}],"description":{"full":"<p>specifies the jstree version in use<\/p>","summary":"<p>specifies the jstree version in use<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults"}],"description":{"full":"<p>holds all the default options used when creating new instances<\/p>","summary":"<p>holds all the default options used when creating new instances<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.plugins"}],"description":{"full":"<p>configure which plugins will be active on an instance. Should be an array of strings, where each element is a plugin name. The default is <code>[]<\/code><\/p>","summary":"<p>configure which plugins will be active on an instance. Should be an array of strings, where each element is a plugin name. The default is <code>[]<\/code><\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.plugins"}],"description":{"full":"<p>stores all loaded jstree plugins (used internally)<\/p>","summary":"<p>stores all loaded jstree plugins (used internally)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.create(el [, options])"},{"type":"param","types":["DOMElement","jQuery","String"],"name":"el","description":"the element to create the instance on, can be jQuery extended or a selector"},{"type":"param","types":["Object"],"name":"options","description":"options for this instance (extends `$.jstree.defaults`)"},{"type":"return","types":["jsTree"],"description":"the new instance"}],"description":{"full":"<p>creates a jstree instance<\/p>","summary":"<p>creates a jstree instance<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"$.jstree","name":"create","string":"$.jstree.create()"}},{"tags":[{"type":"name","string":"$.jstree.destroy()"}],"description":{"full":"<p>remove all traces of jstree from the DOM and destroy all instances<\/p>","summary":"<p>remove all traces of jstree from the DOM and destroy all instances<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"$.jstree","name":"destroy","string":"$.jstree.destroy()"}},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"$.jstree.core(id)"},{"type":"param","types":["Number"],"name":"id","description":"this instance's index"}],"description":{"full":"<p>the jstree class constructor, used only internally<\/p>","summary":"<p>the jstree class constructor, used only internally<\/p>","body":""},"isPrivate":true,"ignore":false,"ctx":{"type":"method","receiver":"$.jstree","name":"core","string":"$.jstree.core()"}},{"tags":[{"type":"name","string":"$.jstree.reference(needle)"},{"type":"param","types":["DOMElement","jQuery","String"],"name":"needle","description":""},{"type":"return","types":["jsTree","null"],"description":"the instance or `null` if not found"}],"description":{"full":"<p>get a reference to an existing instance<\/p><p><strong>Examples<\/strong><\/p><pre><code>\/\/ provided a container with an ID of &quot;tree&quot;, and a nested node with an ID of &quot;branch&quot;\n\/\/ all of there will return the same instance\n$.jstree.reference(&#39;tree&#39;);\n$.jstree.reference(&#39;#tree&#39;);\n$.jstree.reference($(&#39;#tree&#39;));\n$.jstree.reference(document.getElementByID(&#39;tree&#39;));\n$.jstree.reference(&#39;branch&#39;);\n$.jstree.reference(&#39;#branch&#39;);\n$.jstree.reference($(&#39;#branch&#39;));\n$.jstree.reference(document.getElementByID(&#39;branch&#39;));\n<\/code><\/pre>","summary":"<p>get a reference to an existing instance<\/p>","body":"<p><strong>Examples<\/strong><\/p><pre><code>\/\/ provided a container with an ID of &quot;tree&quot;, and a nested node with an ID of &quot;branch&quot;\n\/\/ all of there will return the same instance\n$.jstree.reference(&#39;tree&#39;);\n$.jstree.reference(&#39;#tree&#39;);\n$.jstree.reference($(&#39;#tree&#39;));\n$.jstree.reference(document.getElementByID(&#39;tree&#39;));\n$.jstree.reference(&#39;branch&#39;);\n$.jstree.reference(&#39;#branch&#39;);\n$.jstree.reference($(&#39;#branch&#39;));\n$.jstree.reference(document.getElementByID(&#39;branch&#39;));\n<\/code><\/pre>"},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"$.jstree","name":"reference","string":"$.jstree.reference()"}},{"tags":[{"type":"name","string":"$().jstree([arg])"},{"type":"param","types":["String","Object"],"name":"arg","description":""},{"type":"return","types":["Mixed"],"description":""}],"description":{"full":"<p>Create an instance, get an instance or invoke a command on a instance.<\/p><p>If there is no instance associated with the current node a new one is created and <code>arg<\/code> is used to extend <code>$.jstree.defaults<\/code> for this new instance. There would be no return value (chaining is not broken).<\/p><p>If there is an existing instance and <code>arg<\/code> is a string the command specified by <code>arg<\/code> is executed on the instance, with any additional arguments passed to the function. If the function returns a value it will be returned (chaining could break depending on function).<\/p><p>If there is an existing instance and <code>arg<\/code> is not a string the instance itself is returned (similar to <code>$.jstree.reference<\/code>).<\/p><p>In any other case - nothing is returned and chaining is not broken.<\/p><p><strong>Examples<\/strong><\/p><pre><code>$(&#39;#tree1&#39;).jstree(); \/\/ creates an instance\n$(&#39;#tree2&#39;).jstree({ plugins : [] }); \/\/ create an instance with some options\n$(&#39;#tree1&#39;).jstree(&#39;open_node&#39;, &#39;#branch_1&#39;); \/\/ call a method on an existing instance, passing additional arguments\n$(&#39;#tree2&#39;).jstree(); \/\/ get an existing instance (or create an instance)\n$(&#39;#tree2&#39;).jstree(true); \/\/ get an existing instance (will not create new instance)\n$(&#39;#branch_1&#39;).jstree().select_node(&#39;#branch_1&#39;); \/\/ get an instance (using a nested element and call a method)\n<\/code><\/pre>","summary":"<p>Create an instance, get an instance or invoke a command on a instance.<\/p>","body":"<p>If there is no instance associated with the current node a new one is created and <code>arg<\/code> is used to extend <code>$.jstree.defaults<\/code> for this new instance. There would be no return value (chaining is not broken).<\/p><p>If there is an existing instance and <code>arg<\/code> is a string the command specified by <code>arg<\/code> is executed on the instance, with any additional arguments passed to the function. If the function returns a value it will be returned (chaining could break depending on function).<\/p><p>If there is an existing instance and <code>arg<\/code> is not a string the instance itself is returned (similar to <code>$.jstree.reference<\/code>).<\/p><p>In any other case - nothing is returned and chaining is not broken.<\/p><p><strong>Examples<\/strong><\/p><pre><code>$(&#39;#tree1&#39;).jstree(); \/\/ creates an instance\n$(&#39;#tree2&#39;).jstree({ plugins : [] }); \/\/ create an instance with some options\n$(&#39;#tree1&#39;).jstree(&#39;open_node&#39;, &#39;#branch_1&#39;); \/\/ call a method on an existing instance, passing additional arguments\n$(&#39;#tree2&#39;).jstree(); \/\/ get an existing instance (or create an instance)\n$(&#39;#tree2&#39;).jstree(true); \/\/ get an existing instance (will not create new instance)\n$(&#39;#branch_1&#39;).jstree().select_node(&#39;#branch_1&#39;); \/\/ get an instance (using a nested element and call a method)\n<\/code><\/pre>"},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"$.fn","name":"jstree","string":"$.fn.jstree()"}},{"tags":[{"type":"name","string":"$(':jstree')"},{"type":"return","types":["jQuery"],"description":""}],"description":{"full":"<p>used to find elements containing an instance<\/p><p><strong>Examples<\/strong><\/p><pre><code>$(&#39;div:jstree&#39;).each(function () {\n    $(this).jstree(&#39;destroy&#39;);\n});\n<\/code><\/pre>","summary":"<p>used to find elements containing an instance<\/p>","body":"<p><strong>Examples<\/strong><\/p><pre><code>$(&#39;div:jstree&#39;).each(function () {\n    $(this).jstree(&#39;destroy&#39;);\n});\n<\/code><\/pre>"},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core"}],"description":{"full":"<p>stores all defaults for the core<\/p>","summary":"<p>stores all defaults for the core<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.data"}],"description":{"full":"<p>data configuration<\/p><p>If left as <code>false<\/code> the HTML inside the jstree container element is used to populate the tree (that should be an unordered list with list items).<\/p><p>You can also pass in a HTML string or a JSON array here.<\/p><p>It is possible to pass in a standard jQuery-like AJAX config and jstree will automatically determine if the response is JSON or HTML and use that to populate the tree.<br \/>In addition to the standard jQuery ajax options here you can suppy functions for <code>data<\/code> and <code>url<\/code>, the functions will be run in the current instance&#39;s scope and a param will be passed indicating which node is being loaded, the return value of those functions will be used.<\/p><p>The last option is to specify a function, that function will receive the node being loaded as argument and a second param which is a function which should be called with the result.<\/p><p><strong>Examples<\/strong><\/p><pre><code>\/\/ AJAX\n$(&#39;#tree&#39;).jstree({\n    &#39;core&#39; : {\n        &#39;data&#39; : {\n            &#39;url&#39; : &#39;\/get\/children\/&#39;,\n            &#39;data&#39; : function (node) {\n                return { &#39;id&#39; : node.id };\n            }\n        }\n    });\n\n\/\/ direct data\n$(&#39;#tree&#39;).jstree({\n    &#39;core&#39; : {\n        &#39;data&#39; : [\n            &#39;Simple root node&#39;,\n            {\n                &#39;id&#39; : &#39;node_2&#39;,\n                &#39;text&#39; : &#39;Root node with options&#39;,\n                &#39;state&#39; : { &#39;opened&#39; : true, &#39;selected&#39; : true },\n                &#39;children&#39; : [ { &#39;text&#39; : &#39;Child 1&#39; }, &#39;Child 2&#39;]\n            }\n        ]\n    });\n\n\/\/ function\n$(&#39;#tree&#39;).jstree({\n    &#39;core&#39; : {\n        &#39;data&#39; : function (obj, callback) {\n            callback.call(this, [&#39;Root 1&#39;, &#39;Root 2&#39;]);\n        }\n    });\n<\/code><\/pre>","summary":"<p>data configuration<\/p>","body":"<p>If left as <code>false<\/code> the HTML inside the jstree container element is used to populate the tree (that should be an unordered list with list items).<\/p><p>You can also pass in a HTML string or a JSON array here.<\/p><p>It is possible to pass in a standard jQuery-like AJAX config and jstree will automatically determine if the response is JSON or HTML and use that to populate the tree.<br \/>In addition to the standard jQuery ajax options here you can suppy functions for <code>data<\/code> and <code>url<\/code>, the functions will be run in the current instance&#39;s scope and a param will be passed indicating which node is being loaded, the return value of those functions will be used.<\/p><p>The last option is to specify a function, that function will receive the node being loaded as argument and a second param which is a function which should be called with the result.<\/p><p><strong>Examples<\/strong><\/p><pre><code>\/\/ AJAX\n$(&#39;#tree&#39;).jstree({\n    &#39;core&#39; : {\n        &#39;data&#39; : {\n            &#39;url&#39; : &#39;\/get\/children\/&#39;,\n            &#39;data&#39; : function (node) {\n                return { &#39;id&#39; : node.id };\n            }\n        }\n    });\n\n\/\/ direct data\n$(&#39;#tree&#39;).jstree({\n    &#39;core&#39; : {\n        &#39;data&#39; : [\n            &#39;Simple root node&#39;,\n            {\n                &#39;id&#39; : &#39;node_2&#39;,\n                &#39;text&#39; : &#39;Root node with options&#39;,\n                &#39;state&#39; : { &#39;opened&#39; : true, &#39;selected&#39; : true },\n                &#39;children&#39; : [ { &#39;text&#39; : &#39;Child 1&#39; }, &#39;Child 2&#39;]\n            }\n        ]\n    });\n\n\/\/ function\n$(&#39;#tree&#39;).jstree({\n    &#39;core&#39; : {\n        &#39;data&#39; : function (obj, callback) {\n            callback.call(this, [&#39;Root 1&#39;, &#39;Root 2&#39;]);\n        }\n    });\n<\/code><\/pre>"},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.strings"}],"description":{"full":"<p>configure the various strings used throughout the tree<\/p><p>You can use an object where the key is the string you need to replace and the value is your replacement.<br \/>Another option is to specify a function which will be called with an argument of the needed string and should return the replacement.<br \/>If left as <code>false<\/code> no replacement is made.<\/p><p><strong>Examples<\/strong><\/p><pre><code>$(&#39;#tree&#39;).jstree({\n    &#39;core&#39; : {\n        &#39;strings&#39; : {\n            &#39;Loading ...&#39; : &#39;Please wait ...&#39;\n        }\n    }\n});\n<\/code><\/pre>","summary":"<p>configure the various strings used throughout the tree<\/p>","body":"<p>You can use an object where the key is the string you need to replace and the value is your replacement.<br \/>Another option is to specify a function which will be called with an argument of the needed string and should return the replacement.<br \/>If left as <code>false<\/code> no replacement is made.<\/p><p><strong>Examples<\/strong><\/p><pre><code>$(&#39;#tree&#39;).jstree({\n    &#39;core&#39; : {\n        &#39;strings&#39; : {\n            &#39;Loading ...&#39; : &#39;Please wait ...&#39;\n        }\n    }\n});\n<\/code><\/pre>"},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.check_callback"}],"description":{"full":"<p>determines what happens when a user tries to modify the structure of the tree<br \/>If left as <code>false<\/code> all operations like create, rename, delete, move or copy are prevented.<br \/>You can set this to <code>true<\/code> to allow all interactions or use a function to have better control.<\/p><p><strong>Examples<\/strong><\/p><pre><code>$(&#39;#tree&#39;).jstree({\n    &#39;core&#39; : {\n        &#39;check_callback&#39; : function (operation, node, node_parent, node_position, more) {\n            \/\/ operation can be &#39;create_node&#39;, &#39;rename_node&#39;, &#39;delete_node&#39;, &#39;move_node&#39; or &#39;copy_node&#39;\n            \/\/ in case of &#39;rename_node&#39; node_position is filled with the new node name\n            return operation === &#39;rename_node&#39; ? true : false;\n        }\n    }\n});\n<\/code><\/pre>","summary":"<p>determines what happens when a user tries to modify the structure of the tree<br \/>If left as <code>false<\/code> all operations like create, rename, delete, move or copy are prevented.<br \/>You can set this to <code>true<\/code> to allow all interactions or use a function to have better control.<\/p>","body":"<p><strong>Examples<\/strong><\/p><pre><code>$(&#39;#tree&#39;).jstree({\n    &#39;core&#39; : {\n        &#39;check_callback&#39; : function (operation, node, node_parent, node_position, more) {\n            \/\/ operation can be &#39;create_node&#39;, &#39;rename_node&#39;, &#39;delete_node&#39;, &#39;move_node&#39; or &#39;copy_node&#39;\n            \/\/ in case of &#39;rename_node&#39; node_position is filled with the new node name\n            return operation === &#39;rename_node&#39; ? true : false;\n        }\n    }\n});\n<\/code><\/pre>"},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.error"}],"description":{"full":"<p>a callback called with a single object parameter in the instance&#39;s scope when something goes wrong (operation prevented, ajax failed, etc)<\/p>","summary":"<p>a callback called with a single object parameter in the instance&#39;s scope when something goes wrong (operation prevented, ajax failed, etc)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.animation"}],"description":{"full":"<p>the open \/ close animation duration in milliseconds - set this to <code>false<\/code> to disable the animation (default is <code>200<\/code>)<\/p>","summary":"<p>the open \/ close animation duration in milliseconds - set this to <code>false<\/code> to disable the animation (default is <code>200<\/code>)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.multiple"}],"description":{"full":"<p>a boolean indicating if multiple nodes can be selected<\/p>","summary":"<p>a boolean indicating if multiple nodes can be selected<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.themes"}],"description":{"full":"<p>theme configuration object<\/p>","summary":"<p>theme configuration object<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.themes.name"}],"description":{"full":"<p>the name of the theme to use (if left as <code>false<\/code> the default theme is used)<\/p>","summary":"<p>the name of the theme to use (if left as <code>false<\/code> the default theme is used)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.themes.url"}],"description":{"full":"<p>the URL of the theme&#39;s CSS file, leave this as <code>false<\/code> if you have manually included the theme CSS (recommended). You can set this to <code>true<\/code> too which will try to autoload the theme.<\/p>","summary":"<p>the URL of the theme&#39;s CSS file, leave this as <code>false<\/code> if you have manually included the theme CSS (recommended). You can set this to <code>true<\/code> too which will try to autoload the theme.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.themes.dir"}],"description":{"full":"<p>the location of all jstree themes - only used if <code>url<\/code> is set to <code>true<\/code><\/p>","summary":"<p>the location of all jstree themes - only used if <code>url<\/code> is set to <code>true<\/code><\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.themes.dots"}],"description":{"full":"<p>a boolean indicating if connecting dots are shown<\/p>","summary":"<p>a boolean indicating if connecting dots are shown<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.themes.icons"}],"description":{"full":"<p>a boolean indicating if node icons are shown<\/p>","summary":"<p>a boolean indicating if node icons are shown<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.themes.stripes"}],"description":{"full":"<p>a boolean indicating if the tree background is striped<\/p>","summary":"<p>a boolean indicating if the tree background is striped<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.themes.variant"}],"description":{"full":"<p>a string (or boolean <code>false<\/code>) specifying the theme variant to use (if the theme supports variants)<\/p>","summary":"<p>a string (or boolean <code>false<\/code>) specifying the theme variant to use (if the theme supports variants)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.themes.responsive"}],"description":{"full":"<p>a boolean specifying if a reponsive version of the theme should kick in on smaller screens (if the theme supports it). Defaults to <code>false<\/code>.<\/p>","summary":"<p>a boolean specifying if a reponsive version of the theme should kick in on smaller screens (if the theme supports it). Defaults to <code>false<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.expand_selected_onload"}],"description":{"full":"<p>if left as <code>true<\/code> all parents of all selected nodes will be opened once the tree loads (so that all selected nodes are visible to the user)<\/p>","summary":"<p>if left as <code>true<\/code> all parents of all selected nodes will be opened once the tree loads (so that all selected nodes are visible to the user)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.worker"}],"description":{"full":"<p>if left as <code>true<\/code> web workers will be used to parse incoming JSON data where possible, so that the UI will not be blocked by large requests. Workers are however about 30% slower. Defaults to <code>true<\/code><\/p>","summary":"<p>if left as <code>true<\/code> web workers will be used to parse incoming JSON data where possible, so that the UI will not be blocked by large requests. Workers are however about 30% slower. Defaults to <code>true<\/code><\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.force_text"}],"description":{"full":"<p>Force node text to plain text (and escape HTML). Defaults to <code>false<\/code><\/p>","summary":"<p>Force node text to plain text (and escape HTML). Defaults to <code>false<\/code><\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.core.dblclick_toggle"}],"description":{"full":"<p>Should the node should be toggled if the text is double clicked . Defaults to <code>true<\/code><\/p>","summary":"<p>Should the node should be toggled if the text is double clicked . Defaults to <code>true<\/code><\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"plugin(deco [, opts])"},{"type":"param","types":["String"],"name":"deco","description":"the plugin to decorate with"},{"type":"param","types":["Object"],"name":"opts","description":"options for the plugin"},{"type":"return","types":["jsTree"],"description":""}],"description":{"full":"<p>used to decorate an instance with a plugin. Used internally.<\/p>","summary":"<p>used to decorate an instance with a plugin. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"init(el, optons)"},{"type":"param","types":["DOMElement","jQuery","String"],"name":"el","description":"the element we are transforming"},{"type":"param","types":["Object"],"name":"options","description":"options for this instance"},{"type":"trigger","string":"init.jstree, loading.jstree, loaded.jstree, ready.jstree, changed.jstree"}],"description":{"full":"<p>initialize the instance. Used internally.<\/p>","summary":"<p>initialize the instance. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"init.jstree"}],"description":{"full":"<p>triggered after all events are bound<\/p>","summary":"<p>triggered after all events are bound<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"loading.jstree"}],"description":{"full":"<p>triggered after the loading text is shown and before loading starts<\/p>","summary":"<p>triggered after the loading text is shown and before loading starts<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"destroy()"},{"type":"param","types":["Boolean"],"name":"keep_html","description":"if not set to `true` the container will be emptied, otherwise the current DOM elements will be kept intact"}],"description":{"full":"<p>destroy an instance<\/p>","summary":"<p>destroy an instance<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"teardown()"}],"description":{"full":"<p>part of the destroying of an instance. Used internally.<\/p>","summary":"<p>part of the destroying of an instance. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"bind()"}],"description":{"full":"<p>bind all events. Used internally.<\/p>","summary":"<p>bind all events. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[],"description":{"full":"<p>\/\/ delete<br \/>                            case 46:<br \/>                                e.preventDefault();<br \/>                                o = this.get_node(e.currentTarget);<br \/>                                if(o &amp;&amp; o.id &amp;&amp; o.id !== &#39;#&#39;) {<br \/>                                    o = this.is_selected(o) ? this.get_selected() : o;<br \/>                                    this.delete_node(o);<br \/>                                }<br \/>                                break;<br \/>                            \/\/ f2<br \/>                            case 113:<br \/>                                e.preventDefault();<br \/>                                o = this.get_node(e.currentTarget);<br \/>                                if(o &amp;&amp; o.id &amp;&amp; o.id !== &#39;#&#39;) {<br \/>                                    \/\/ this.edit(o);<br \/>                                }<br \/>                                break;<br \/>                            default:<br \/>                                \/\/ console.log(e.which);<br \/>                                break;<\/p>","summary":"<p>\/\/ delete<br \/>                            case 46:<br \/>                                e.preventDefault();<br \/>                                o = this.get_node(e.currentTarget);<br \/>                                if(o &amp;&amp; o.id &amp;&amp; o.id !== &#39;#&#39;) {<br \/>                                    o = this.is_selected(o) ? this.get_selected() : o;<br \/>                                    this.delete_node(o);<br \/>                                }<br \/>                                break;<br \/>                            \/\/ f2<br \/>                            case 113:<br \/>                                e.preventDefault();<br \/>                                o = this.get_node(e.currentTarget);<br \/>                                if(o &amp;&amp; o.id &amp;&amp; o.id !== &#39;#&#39;) {<br \/>                                    \/\/ this.edit(o);<br \/>                                }<br \/>                                break;<br \/>                            default:<br \/>                                \/\/ console.log(e.which);<br \/>                                break;<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"loaded.jstree"}],"description":{"full":"<p>triggered after the root node is loaded for the first time<\/p>","summary":"<p>triggered after the root node is loaded for the first time<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"ready.jstree"}],"description":{"full":"<p>triggered after all nodes are finished loading<\/p>","summary":"<p>triggered after all nodes are finished loading<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"unbind()"}],"description":{"full":"<p>part of the destroying of an instance. Used internally.<\/p>","summary":"<p>part of the destroying of an instance. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"trigger(ev [, data])"},{"type":"param","types":["String"],"name":"ev","description":"the name of the event to trigger"},{"type":"param","types":["Object"],"name":"data","description":"additional data to pass with the event"}],"description":{"full":"<p>trigger an event. Used internally.<\/p>","summary":"<p>trigger an event. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"name","string":"get_container()"},{"type":"return","types":["jQuery"],"description":""}],"description":{"full":"<p>returns the jQuery extended instance container<\/p>","summary":"<p>returns the jQuery extended instance container<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"get_container_ul()"},{"type":"return","types":["jQuery"],"description":""}],"description":{"full":"<p>returns the jQuery extended main UL node inside the instance container. Used internally.<\/p>","summary":"<p>returns the jQuery extended main UL node inside the instance container. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"get_string(key)"},{"type":"param","types":["String"],"name":"key","description":""},{"type":"return","types":["String"],"description":""}],"description":{"full":"<p>gets string replacements (localization). Used internally.<\/p>","summary":"<p>gets string replacements (localization). Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_firstChild(dom)"},{"type":"param","types":["DOMElement"],"name":"dom","description":""},{"type":"return","types":["DOMElement"],"description":""}],"description":{"full":"<p>gets the first child of a DOM node. Used internally.<\/p>","summary":"<p>gets the first child of a DOM node. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_nextSibling(dom)"},{"type":"param","types":["DOMElement"],"name":"dom","description":""},{"type":"return","types":["DOMElement"],"description":""}],"description":{"full":"<p>gets the next sibling of a DOM node. Used internally.<\/p>","summary":"<p>gets the next sibling of a DOM node. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_previousSibling(dom)"},{"type":"param","types":["DOMElement"],"name":"dom","description":""},{"type":"return","types":["DOMElement"],"description":""}],"description":{"full":"<p>gets the previous sibling of a DOM node. Used internally.<\/p>","summary":"<p>gets the previous sibling of a DOM node. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"name","string":"get_node(obj [, as_dom])"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"param","types":["Boolean"],"name":"as_dom","description":""},{"type":"return","types":["Object","jQuery"],"description":""}],"description":{"full":"<p>get the JSON representation of a node (or the actual jQuery extended DOM node) by using any input (child DOM element, ID string, selector, etc)<\/p>","summary":"<p>get the JSON representation of a node (or the actual jQuery extended DOM node) by using any input (child DOM element, ID string, selector, etc)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_path(obj [, glue, ids])"},{"type":"param","types":["mixed"],"name":"obj","description":"the node"},{"type":"param","types":["String"],"name":"glue","description":"if you want the path as a string - pass the glue here (for example '\/'), if a falsy value is supplied here, an array is returned"},{"type":"param","types":["Boolean"],"name":"ids","description":"if set to true build the path using ID, otherwise node text is used"},{"type":"return","types":["mixed"],"description":""}],"description":{"full":"<p>get the path to a node, either consisting of node texts, or of node IDs, optionally glued together (otherwise an array)<\/p>","summary":"<p>get the path to a node, either consisting of node texts, or of node IDs, optionally glued together (otherwise an array)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_next_dom(obj [, strict])"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"param","types":["Boolean"],"name":"strict","description":""},{"type":"return","types":["jQuery"],"description":""}],"description":{"full":"<p>get the next visible node that is below the <code>obj<\/code> node. If <code>strict<\/code> is set to <code>true<\/code> only sibling nodes are returned.<\/p>","summary":"<p>get the next visible node that is below the <code>obj<\/code> node. If <code>strict<\/code> is set to <code>true<\/code> only sibling nodes are returned.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_prev_dom(obj [, strict])"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"param","types":["Boolean"],"name":"strict","description":""},{"type":"return","types":["jQuery"],"description":""}],"description":{"full":"<p>get the previous visible node that is above the <code>obj<\/code> node. If <code>strict<\/code> is set to <code>true<\/code> only sibling nodes are returned.<\/p>","summary":"<p>get the previous visible node that is above the <code>obj<\/code> node. If <code>strict<\/code> is set to <code>true<\/code> only sibling nodes are returned.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_parent(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"return","types":["String"],"description":""}],"description":{"full":"<p>get the parent ID of a node<\/p>","summary":"<p>get the parent ID of a node<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_children_dom(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"return","types":["jQuery"],"description":""}],"description":{"full":"<p>get a jQuery collection of all the children of a node (node must be rendered)<\/p>","summary":"<p>get a jQuery collection of all the children of a node (node must be rendered)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"is_parent(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"return","types":["Boolean"],"description":""}],"description":{"full":"<p>checks if a node has children<\/p>","summary":"<p>checks if a node has children<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"is_loaded(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"return","types":["Boolean"],"description":""}],"description":{"full":"<p>checks if a node is loaded (its children are available)<\/p>","summary":"<p>checks if a node is loaded (its children are available)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"is_loading(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"return","types":["Boolean"],"description":""}],"description":{"full":"<p>check if a node is currently loading (fetching children)<\/p>","summary":"<p>check if a node is currently loading (fetching children)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"is_open(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"return","types":["Boolean"],"description":""}],"description":{"full":"<p>check if a node is opened<\/p>","summary":"<p>check if a node is opened<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"is_closed(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"return","types":["Boolean"],"description":""}],"description":{"full":"<p>check if a node is in a closed state<\/p>","summary":"<p>check if a node is in a closed state<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"is_leaf(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"return","types":["Boolean"],"description":""}],"description":{"full":"<p>check if a node has no children<\/p>","summary":"<p>check if a node has no children<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"load_node(obj [, callback])"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"param","types":["function"],"name":"callback","description":"a function to be executed once loading is complete, the function is executed in the instance's scope and receives two arguments - the node and a boolean status"},{"type":"return","types":["Boolean"],"description":""},{"type":"trigger","string":"load_node.jstree"}],"description":{"full":"<p>loads a node (fetches its children using the <code>core.data<\/code> setting). Multiple nodes can be passed to by using an array.<\/p>","summary":"<p>loads a node (fetches its children using the <code>core.data<\/code> setting). Multiple nodes can be passed to by using an array.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"load_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the node that was loading"},{"type":"param","types":["Boolean"],"name":"status","description":"was the node loaded successfully"}],"description":{"full":"<p>triggered after a node is loaded<\/p>","summary":"<p>triggered after a node is loaded<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_load_nodes(nodes [, callback])"},{"type":"param","types":["array"],"name":"nodes","description":""},{"type":"param","types":["function"],"name":"callback","description":"a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - the array passed to _load_nodes"}],"description":{"full":"<p>load an array of nodes (will also load unavailable nodes as soon as the appear in the structure). Used internally.<\/p>","summary":"<p>load an array of nodes (will also load unavailable nodes as soon as the appear in the structure). Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"name","string":"load_all([obj, callback])"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to load recursively, omit to load all nodes in the tree"},{"type":"param","types":["function"],"name":"callback","description":"a function to be executed once loading all the nodes is complete,"},{"type":"trigger","string":"load_all.jstree"}],"description":{"full":"<p>loads all unloaded nodes<\/p>","summary":"<p>loads all unloaded nodes<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"load_all.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the recursively loaded node"}],"description":{"full":"<p>triggered after a load_all call completes<\/p>","summary":"<p>triggered after a load_all call completes<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_load_node(obj [, callback])"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"param","types":["function"],"name":"callback","description":"a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - a boolean status"},{"type":"return","types":["Boolean"],"description":""}],"description":{"full":"<p>handles the actual loading of a node. Used only internally.<\/p>","summary":"<p>handles the actual loading of a node. Used only internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_node_changed(obj [, callback])"},{"type":"param","types":["mixed"],"name":"obj","description":""}],"description":{"full":"<p>adds a node to the list of nodes to redraw. Used only internally.<\/p>","summary":"<p>adds a node to the list of nodes to redraw. Used only internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_append_html_data(obj, data)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to append to"},{"type":"param","types":["String"],"name":"data","description":"the HTML string to parse and append"},{"type":"trigger","string":"model.jstree, changed.jstree"}],"description":{"full":"<p>appends HTML content to the tree. Used internally.<\/p>","summary":"<p>appends HTML content to the tree. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"model.jstree"},{"type":"param","types":["Array"],"name":"nodes","description":"an array of node IDs"},{"type":"param","types":["String"],"name":"parent","description":"the parent ID of the nodes"}],"description":{"full":"<p>triggered when new data is inserted to the tree model<\/p>","summary":"<p>triggered when new data is inserted to the tree model<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_append_json_data(obj, data)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to append to"},{"type":"param","types":["String"],"name":"data","description":"the JSON object to parse and append"},{"type":"param","types":["Boolean"],"name":"force_processing","description":"internal param - do not set"},{"type":"trigger","string":"model.jstree, changed.jstree"}],"description":{"full":"<p>appends JSON content to the tree. Used internally.<\/p>","summary":"<p>appends JSON content to the tree. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_parse_model_from_html(d [, p, ps])"},{"type":"param","types":["jQuery"],"name":"d","description":"the jQuery object to parse"},{"type":"param","types":["String"],"name":"p","description":"the parent ID"},{"type":"param","types":["Array"],"name":"ps","description":"list of all parents"},{"type":"return","types":["String"],"description":"the ID of the object added to the model"}],"description":{"full":"<p>parses a node from a jQuery object and appends them to the in memory tree model. Used internally.<\/p>","summary":"<p>parses a node from a jQuery object and appends them to the in memory tree model. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_parse_model_from_flat_json(d [, p, ps])"},{"type":"param","types":["Object"],"name":"d","description":"the JSON object to parse"},{"type":"param","types":["String"],"name":"p","description":"the parent ID"},{"type":"param","types":["Array"],"name":"ps","description":"list of all parents"},{"type":"return","types":["String"],"description":"the ID of the object added to the model"}],"description":{"full":"<p>parses a node from a JSON object (used when dealing with flat data, which has no nesting of children, but has id and parent properties) and appends it to the in memory tree model. Used internally.<\/p>","summary":"<p>parses a node from a JSON object (used when dealing with flat data, which has no nesting of children, but has id and parent properties) and appends it to the in memory tree model. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_parse_model_from_json(d [, p, ps])"},{"type":"param","types":["Object"],"name":"d","description":"the JSON object to parse"},{"type":"param","types":["String"],"name":"p","description":"the parent ID"},{"type":"param","types":["Array"],"name":"ps","description":"list of all parents"},{"type":"return","types":["String"],"description":"the ID of the object added to the model"}],"description":{"full":"<p>parses a node from a JSON object and appends it to the in memory tree model. Used internally.<\/p>","summary":"<p>parses a node from a JSON object and appends it to the in memory tree model. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_redraw()"},{"type":"trigger","string":"redraw.jstree"}],"description":{"full":"<p>redraws all nodes that need to be redrawn. Used internally.<\/p>","summary":"<p>redraws all nodes that need to be redrawn. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"redraw.jstree"},{"type":"param","types":["array"],"name":"nodes","description":"the redrawn nodes"}],"description":{"full":"<p>triggered after nodes are redrawn<\/p>","summary":"<p>triggered after nodes are redrawn<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"redraw([full])"},{"type":"param","types":["Boolean"],"name":"full","description":"if set to `true` all nodes are redrawn."}],"description":{"full":"<p>redraws all nodes that need to be redrawn or optionally - the whole tree<\/p>","summary":"<p>redraws all nodes that need to be redrawn or optionally - the whole tree<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"draw_children(node)"},{"type":"param","types":["mixed"],"name":"node","description":"the node whose children will be redrawn"}],"description":{"full":"<p>redraws a single node&#39;s children. Used internally.<\/p>","summary":"<p>redraws a single node&#39;s children. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"redraw_node(node, deep, is_callback, force_render)"},{"type":"param","types":["mixed"],"name":"node","description":"the node to redraw"},{"type":"param","types":["Boolean"],"name":"deep","description":"should child nodes be redrawn too"},{"type":"param","types":["Boolean"],"name":"is_callback","description":"is this a recursion call"},{"type":"param","types":["Boolean"],"name":"force_render","description":"should children of closed parents be drawn anyway"}],"description":{"full":"<p>redraws a single node. Used internally.<\/p>","summary":"<p>redraws a single node. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"name","string":"open_node(obj [, callback, animation])"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to open"},{"type":"param","types":["Function"],"name":"callback","description":"a function to execute once the node is opened"},{"type":"param","types":["Number"],"name":"animation","description":"the animation duration in milliseconds when opening the node (overrides the `core.animation` setting). Use `false` for no animation."},{"type":"trigger","string":"open_node.jstree, after_open.jstree, before_open.jstree"}],"description":{"full":"<p>opens a node, revaling its children. If the node is not loaded it will be loaded and opened once ready.<\/p>","summary":"<p>opens a node, revaling its children. If the node is not loaded it will be loaded and opened once ready.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"before_open.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the opened node"}],"description":{"full":"<p>triggered when a node is about to be opened (if the node is supposed to be in the DOM, it will be, but it won&#39;t be visible yet)<\/p>","summary":"<p>triggered when a node is about to be opened (if the node is supposed to be in the DOM, it will be, but it won&#39;t be visible yet)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"open_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the opened node"}],"description":{"full":"<p>triggered when a node is opened (if there is an animation it will not be completed yet)<\/p>","summary":"<p>triggered when a node is opened (if there is an animation it will not be completed yet)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"after_open.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the opened node"}],"description":{"full":"<p>triggered when a node is opened and the animation is complete<\/p>","summary":"<p>triggered when a node is opened and the animation is complete<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"_open_to(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to reveal"},{"type":"private","visibility":"private"}],"description":{"full":"<p>opens every parent of a node (node should be loaded)<\/p>","summary":"<p>opens every parent of a node (node should be loaded)<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"name","string":"close_node(obj [, animation])"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to close"},{"type":"param","types":["Number"],"name":"animation","description":"the animation duration in milliseconds when closing the node (overrides the `core.animation` setting). Use `false` for no animation."},{"type":"trigger","string":"close_node.jstree, after_close.jstree"}],"description":{"full":"<p>closes a node, hiding its children<\/p>","summary":"<p>closes a node, hiding its children<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"close_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the closed node"}],"description":{"full":"<p>triggered when a node is closed (if there is an animation it will not be complete yet)<\/p>","summary":"<p>triggered when a node is closed (if there is an animation it will not be complete yet)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"after_close.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the closed node"}],"description":{"full":"<p>triggered when a node is closed and the animation is complete<\/p>","summary":"<p>triggered when a node is closed and the animation is complete<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"toggle_node(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to toggle"}],"description":{"full":"<p>toggles a node - closing it if it is open, opening it if it is closed<\/p>","summary":"<p>toggles a node - closing it if it is open, opening it if it is closed<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"open_all([obj, animation, original_obj])"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to open recursively, omit to open all nodes in the tree"},{"type":"param","types":["Number"],"name":"animation","description":"the animation duration in milliseconds when opening the nodes, the default is no animation"},{"type":"param","types":["jQuery"],"name":"reference","description":"to the node that started the process (internal use)"},{"type":"trigger","string":"open_all.jstree"}],"description":{"full":"<p>opens all nodes within a node (or the tree), revaling their children. If the node is not loaded it will be loaded and opened once ready.<\/p>","summary":"<p>opens all nodes within a node (or the tree), revaling their children. If the node is not loaded it will be loaded and opened once ready.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"open_all.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the opened node"}],"description":{"full":"<p>triggered when an <code>open_all<\/code> call completes<\/p>","summary":"<p>triggered when an <code>open_all<\/code> call completes<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"close_all([obj, animation])"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to close recursively, omit to close all nodes in the tree"},{"type":"param","types":["Number"],"name":"animation","description":"the animation duration in milliseconds when closing the nodes, the default is no animation"},{"type":"trigger","string":"close_all.jstree"}],"description":{"full":"<p>closes all nodes within a node (or the tree), revaling their children<\/p>","summary":"<p>closes all nodes within a node (or the tree), revaling their children<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"close_all.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the closed node"}],"description":{"full":"<p>triggered when an <code>close_all<\/code> call completes<\/p>","summary":"<p>triggered when an <code>close_all<\/code> call completes<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"is_disabled(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"return","types":["Boolean"],"description":""}],"description":{"full":"<p>checks if a node is disabled (not selectable)<\/p>","summary":"<p>checks if a node is disabled (not selectable)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"enable_node(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to enable"},{"type":"trigger","string":"enable_node.jstree"}],"description":{"full":"<p>enables a node - so that it can be selected<\/p>","summary":"<p>enables a node - so that it can be selected<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"enable_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the enabled node"}],"description":{"full":"<p>triggered when an node is enabled<\/p>","summary":"<p>triggered when an node is enabled<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"disable_node(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to disable"},{"type":"trigger","string":"disable_node.jstree"}],"description":{"full":"<p>disables a node - so that it can not be selected<\/p>","summary":"<p>disables a node - so that it can not be selected<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"disable_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the disabled node"}],"description":{"full":"<p>triggered when an node is disabled<\/p>","summary":"<p>triggered when an node is disabled<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"activate_node(obj, e)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node"},{"type":"param","types":["Object"],"name":"e","description":"the related event"},{"type":"trigger","string":"activate_node.jstree, changed.jstree"}],"description":{"full":"<p>called when a node is selected by the user. Used internally.<\/p>","summary":"<p>called when a node is selected by the user. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"activate_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":""}],"description":{"full":"<p>triggered when an node is clicked or intercated with by the user<\/p>","summary":"<p>triggered when an node is clicked or intercated with by the user<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"hover_node(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"trigger","string":"hover_node.jstree"}],"description":{"full":"<p>applies the hover state on a node, called when a node is hovered by the user. Used internally.<\/p>","summary":"<p>applies the hover state on a node, called when a node is hovered by the user. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"hover_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":""}],"description":{"full":"<p>triggered when an node is hovered<\/p>","summary":"<p>triggered when an node is hovered<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"dehover_node(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"trigger","string":"dehover_node.jstree"}],"description":{"full":"<p>removes the hover state from a nodecalled when a node is no longer hovered by the user. Used internally.<\/p>","summary":"<p>removes the hover state from a nodecalled when a node is no longer hovered by the user. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"dehover_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":""}],"description":{"full":"<p>triggered when an node is no longer hovered<\/p>","summary":"<p>triggered when an node is no longer hovered<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"select_node(obj [, supress_event, prevent_open])"},{"type":"param","types":["mixed"],"name":"obj","description":"an array can be used to select multiple nodes"},{"type":"param","types":["Boolean"],"name":"supress_event","description":"if set to `true` the `changed.jstree` event won't be triggered"},{"type":"param","types":["Boolean"],"name":"prevent_open","description":"if set to `true` parents of the selected node won't be opened"},{"type":"trigger","string":"select_node.jstree, changed.jstree"}],"description":{"full":"<p>select a node<\/p>","summary":"<p>select a node<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"select_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":""},{"type":"param","types":["Array"],"name":"selected","description":"the current selection"},{"type":"param","types":["Object"],"name":"event","description":"the event (if any) that triggered this select_node"}],"description":{"full":"<p>triggered when an node is selected<\/p>","summary":"<p>triggered when an node is selected<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"changed.jstree"},{"type":"param","types":["Object"],"name":"node","description":""},{"type":"param","types":["Object"],"name":"action","description":"the action that caused the selection to change"},{"type":"param","types":["Array"],"name":"selected","description":"the current selection"},{"type":"param","types":["Object"],"name":"event","description":"the event (if any) that triggered this changed event"}],"description":{"full":"<p>triggered when selection changes<\/p>","summary":"<p>triggered when selection changes<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"deselect_node(obj [, supress_event])"},{"type":"param","types":["mixed"],"name":"obj","description":"an array can be used to deselect multiple nodes"},{"type":"param","types":["Boolean"],"name":"supress_event","description":"if set to `true` the `changed.jstree` event won't be triggered"},{"type":"trigger","string":"deselect_node.jstree, changed.jstree"}],"description":{"full":"<p>deselect a node<\/p>","summary":"<p>deselect a node<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"deselect_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":""},{"type":"param","types":["Array"],"name":"selected","description":"the current selection"},{"type":"param","types":["Object"],"name":"event","description":"the event (if any) that triggered this deselect_node"}],"description":{"full":"<p>triggered when an node is deselected<\/p>","summary":"<p>triggered when an node is deselected<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"select_all([supress_event])"},{"type":"param","types":["Boolean"],"name":"supress_event","description":"if set to `true` the `changed.jstree` event won't be triggered"},{"type":"trigger","string":"select_all.jstree, changed.jstree"}],"description":{"full":"<p>select all nodes in the tree<\/p>","summary":"<p>select all nodes in the tree<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"select_all.jstree"},{"type":"param","types":["Array"],"name":"selected","description":"the current selection"}],"description":{"full":"<p>triggered when all nodes are selected<\/p>","summary":"<p>triggered when all nodes are selected<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"deselect_all([supress_event])"},{"type":"param","types":["Boolean"],"name":"supress_event","description":"if set to `true` the `changed.jstree` event won't be triggered"},{"type":"trigger","string":"deselect_all.jstree, changed.jstree"}],"description":{"full":"<p>deselect all selected nodes<\/p>","summary":"<p>deselect all selected nodes<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"deselect_all.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the previous selection"},{"type":"param","types":["Array"],"name":"selected","description":"the current selection"}],"description":{"full":"<p>triggered when all nodes are deselected<\/p>","summary":"<p>triggered when all nodes are deselected<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"is_selected(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"return","types":["Boolean"],"description":""}],"description":{"full":"<p>checks if a node is selected<\/p>","summary":"<p>checks if a node is selected<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_selected([full])"},{"type":"param","types":["mixed"],"name":"full","description":"if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned"},{"type":"return","types":["Array"],"description":""}],"description":{"full":"<p>get an array of all selected nodes<\/p>","summary":"<p>get an array of all selected nodes<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_top_selected([full])"},{"type":"param","types":["mixed"],"name":"full","description":"if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned"},{"type":"return","types":["Array"],"description":""}],"description":{"full":"<p>get an array of all top level selected nodes (ignoring children of selected nodes)<\/p>","summary":"<p>get an array of all top level selected nodes (ignoring children of selected nodes)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_bottom_selected([full])"},{"type":"param","types":["mixed"],"name":"full","description":"if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned"},{"type":"return","types":["Array"],"description":""}],"description":{"full":"<p>get an array of all bottom level selected nodes (ignoring selected parents)<\/p>","summary":"<p>get an array of all bottom level selected nodes (ignoring selected parents)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_state()"},{"type":"private","visibility":"private"},{"type":"return","types":["Object"],"description":""}],"description":{"full":"<p>gets the current state of the tree so that it can be restored later with <code>set_state(state)<\/code>. Used internally.<\/p>","summary":"<p>gets the current state of the tree so that it can be restored later with <code>set_state(state)<\/code>. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[],"description":{"full":"<p>&#39;themes&#39; : {<br \/>                        &#39;name&#39; : this.get_theme(),<br \/>                        &#39;icons&#39; : this._data.core.themes.icons,<br \/>                        &#39;dots&#39; : this._data.core.themes.dots<br \/>                    },<\/p>","summary":"<p>&#39;themes&#39; : {<br \/>                        &#39;name&#39; : this.get_theme(),<br \/>                        &#39;icons&#39; : this._data.core.themes.icons,<br \/>                        &#39;dots&#39; : this._data.core.themes.dots<br \/>                    },<\/p>","body":""},"isPrivate":false,"ignore":true},{"tags":[{"type":"name","string":"set_state(state [, callback])"},{"type":"private","visibility":"private"},{"type":"param","types":["Object"],"name":"state","description":"the state to restore"},{"type":"param","types":["Function"],"name":"callback","description":"an optional function to execute once the state is restored."},{"type":"trigger","string":"set_state.jstree"}],"description":{"full":"<p>sets the state of the tree. Used internally.<\/p>","summary":"<p>sets the state of the tree. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"set_state.jstree"}],"description":{"full":"<p>triggered when a <code>set_state<\/code> call completes<\/p>","summary":"<p>triggered when a <code>set_state<\/code> call completes<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"refresh()"},{"type":"param","types":["Boolean"],"name":"skip_loading","description":"an option to skip showing the loading indicator"},{"type":"param","types":["Mixed"],"name":"forget_state","description":"if set to `true` state will not be reapplied, if set to a function (receiving the current state as argument) the result of that function will be used as state"},{"type":"trigger","string":"refresh.jstree"}],"description":{"full":"<p>refreshes the tree - all nodes are reloaded with calls to <code>load_node<\/code>.<\/p>","summary":"<p>refreshes the tree - all nodes are reloaded with calls to <code>load_node<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"refresh.jstree"}],"description":{"full":"<p>triggered when a <code>refresh<\/code> call completes<\/p>","summary":"<p>triggered when a <code>refresh<\/code> call completes<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"refresh_node(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node"},{"type":"trigger","string":"refresh_node.jstree"}],"description":{"full":"<p>refreshes a node in the tree (reload its children) all opened nodes inside that node are reloaded with calls to <code>load_node<\/code>.<\/p>","summary":"<p>refreshes a node in the tree (reload its children) all opened nodes inside that node are reloaded with calls to <code>load_node<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"refresh_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":"- the refreshed node"},{"type":"param","types":["Array"],"name":"nodes","description":"- an array of the IDs of the nodes that were reloaded"}],"description":{"full":"<p>triggered when a node is refreshed<\/p>","summary":"<p>triggered when a node is refreshed<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"set_id(obj, id)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node"},{"type":"param","types":["String"],"name":"id","description":"the new ID"},{"type":"return","types":["Boolean"],"description":""}],"description":{"full":"<p>set (change) the ID of a node<\/p>","summary":"<p>set (change) the ID of a node<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_text(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node"},{"type":"return","types":["String"],"description":""}],"description":{"full":"<p>get the text value of a node<\/p>","summary":"<p>get the text value of a node<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"set_text(obj, val)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node, you can pass an array to set the text on multiple nodes"},{"type":"param","types":["String"],"name":"val","description":"the new text value"},{"type":"return","types":["Boolean"],"description":""},{"type":"trigger","string":"set_text.jstree"}],"description":{"full":"<p>set the text value of a node. Used internally, please use <code>rename_node(obj, val)<\/code>.<\/p>","summary":"<p>set the text value of a node. Used internally, please use <code>rename_node(obj, val)<\/code>.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"set_text.jstree"},{"type":"param","types":["Object"],"name":"obj","description":""},{"type":"param","types":["String"],"name":"text","description":"the new value"}],"description":{"full":"<p>triggered when a node text value is changed<\/p>","summary":"<p>triggered when a node text value is changed<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_json([obj, options])"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"param","types":["Object"],"name":"options","description":""},{"type":"param","types":["Boolean"],"name":"options.no_state","description":"do not return state information"},{"type":"param","types":["Boolean"],"name":"options.no_id","description":"do not return ID"},{"type":"param","types":["Boolean"],"name":"options.no_children","description":"do not include children"},{"type":"param","types":["Boolean"],"name":"options.no_data","description":"do not include node data"},{"type":"param","types":["Boolean"],"name":"options.flat","description":"return flat JSON instead of nested"},{"type":"return","types":["Object"],"description":""}],"description":{"full":"<p>gets a JSON representation of a node (or the whole tree)<\/p>","summary":"<p>gets a JSON representation of a node (or the whole tree)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"create_node([obj, node, pos, callback, is_loaded])"},{"type":"param","types":["mixed"],"name":"par","description":"the parent node (to create a root node use either \"#\" (string) or `null`)"},{"type":"param","types":["mixed"],"name":"node","description":"the data for the new node (a valid JSON object, or a simple string with the name)"},{"type":"param","types":["mixed"],"name":"pos","description":"the index at which to insert the node, \"first\" and \"last\" are also supported, default is \"last\""},{"type":"param","types":["Function"],"name":"callback","description":"a function to be called once the node is created"},{"type":"param","types":["Boolean"],"name":"is_loaded","description":"internal argument indicating if the parent node was succesfully loaded"},{"type":"return","types":["String"],"description":"the ID of the newly create node"},{"type":"trigger","string":"model.jstree, create_node.jstree"}],"description":{"full":"<p>create a new node (do not confuse with load_node)<\/p>","summary":"<p>create a new node (do not confuse with load_node)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"create_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":""},{"type":"param","types":["String"],"name":"parent","description":"the parent's ID"},{"type":"param","types":["Number"],"name":"position","description":"the position of the new node among the parent's children"}],"description":{"full":"<p>triggered when a node is created<\/p>","summary":"<p>triggered when a node is created<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"rename_node(obj, val)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node, you can pass an array to rename multiple nodes to the same name"},{"type":"param","types":["String"],"name":"val","description":"the new text value"},{"type":"return","types":["Boolean"],"description":""},{"type":"trigger","string":"rename_node.jstree"}],"description":{"full":"<p>set the text value of a node<\/p>","summary":"<p>set the text value of a node<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"rename_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":""},{"type":"param","types":["String"],"name":"text","description":"the new value"},{"type":"param","types":["String"],"name":"old","description":"the old value"}],"description":{"full":"<p>triggered when a node is renamed<\/p>","summary":"<p>triggered when a node is renamed<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"delete_node(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node, you can pass an array to delete multiple nodes"},{"type":"return","types":["Boolean"],"description":""},{"type":"trigger","string":"delete_node.jstree, changed.jstree"}],"description":{"full":"<p>remove a node<\/p>","summary":"<p>remove a node<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"delete_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":""},{"type":"param","types":["String"],"name":"parent","description":"the parent's ID"}],"description":{"full":"<p>triggered when a node is deleted<\/p>","summary":"<p>triggered when a node is deleted<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"check(chk, obj, par, pos)"},{"type":"param","types":["String"],"name":"chk","description":"the operation to check, can be \"create_node\", \"rename_node\", \"delete_node\", \"copy_node\" or \"move_node\""},{"type":"param","types":["mixed"],"name":"obj","description":"the node"},{"type":"param","types":["mixed"],"name":"par","description":"the parent"},{"type":"param","types":["mixed"],"name":"pos","description":"the position to insert at, or if \"rename_node\" - the new name"},{"type":"param","types":["mixed"],"name":"more","description":"some various additional information, for example if a \"move_node\" operations is triggered by DND this will be the hovered node"},{"type":"return","types":["Boolean"],"description":""}],"description":{"full":"<p>check if an operation is premitted on the tree. Used internally.<\/p>","summary":"<p>check if an operation is premitted on the tree. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false},{"tags":[{"type":"name","string":"last_error()"},{"type":"return","types":["Object"],"description":""}],"description":{"full":"<p>get the last error<\/p>","summary":"<p>get the last error<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"move_node(obj, par [, pos, callback, is_loaded])"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to move, pass an array to move multiple nodes"},{"type":"param","types":["mixed"],"name":"par","description":"the new parent"},{"type":"param","types":["mixed"],"name":"pos","description":"the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`"},{"type":"param","types":["function"],"name":"callback","description":"a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position"},{"type":"param","types":["Boolean"],"name":"is_loaded","description":"internal parameter indicating if the parent node has been loaded"},{"type":"param","types":["Boolean"],"name":"skip_redraw","description":"internal parameter indicating if the tree should be redrawn"},{"type":"param","types":["Boolean"],"name":"instance","description":"internal parameter indicating if the node comes from another instance"},{"type":"trigger","string":"move_node.jstree"}],"description":{"full":"<p>move a node to a new parent<\/p>","summary":"<p>move a node to a new parent<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"move_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":""},{"type":"param","types":["String"],"name":"parent","description":"the parent's ID"},{"type":"param","types":["Number"],"name":"position","description":"the position of the node among the parent's children"},{"type":"param","types":["String"],"name":"old_parent","description":"the old parent of the node"},{"type":"param","types":["Number"],"name":"old_position","description":"the old position of the node"},{"type":"param","types":["Boolean"],"name":"is_multi","description":"do the node and new parent belong to different instances"},{"type":"param","types":["jsTree"],"name":"old_instance","description":"the instance the node came from"},{"type":"param","types":["jsTree"],"name":"new_instance","description":"the instance of the new parent"}],"description":{"full":"<p>triggered when a node is moved<\/p>","summary":"<p>triggered when a node is moved<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"copy_node(obj, par [, pos, callback, is_loaded])"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to copy, pass an array to copy multiple nodes"},{"type":"param","types":["mixed"],"name":"par","description":"the new parent"},{"type":"param","types":["mixed"],"name":"pos","description":"the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`"},{"type":"param","types":["function"],"name":"callback","description":"a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position"},{"type":"param","types":["Boolean"],"name":"is_loaded","description":"internal parameter indicating if the parent node has been loaded"},{"type":"param","types":["Boolean"],"name":"skip_redraw","description":"internal parameter indicating if the tree should be redrawn"},{"type":"param","types":["Boolean"],"name":"instance","description":"internal parameter indicating if the node comes from another instance"},{"type":"trigger","string":"model.jstree copy_node.jstree"}],"description":{"full":"<p>copy a node to a new parent<\/p>","summary":"<p>copy a node to a new parent<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"copy_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the copied node"},{"type":"param","types":["Object"],"name":"original","description":"the original node"},{"type":"param","types":["String"],"name":"parent","description":"the parent's ID"},{"type":"param","types":["Number"],"name":"position","description":"the position of the node among the parent's children"},{"type":"param","types":["String"],"name":"old_parent","description":"the old parent of the node"},{"type":"param","types":["Number"],"name":"old_position","description":"the position of the original node"},{"type":"param","types":["Boolean"],"name":"is_multi","description":"do the node and new parent belong to different instances"},{"type":"param","types":["jsTree"],"name":"old_instance","description":"the instance the node came from"},{"type":"param","types":["jsTree"],"name":"new_instance","description":"the instance of the new parent"}],"description":{"full":"<p>triggered when a node is copied<\/p>","summary":"<p>triggered when a node is copied<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"cut(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":"multiple objects can be passed using an array"},{"type":"trigger","string":"cut.jstree"}],"description":{"full":"<p>cut a node (a later call to <code>paste(obj)<\/code> would move the node)<\/p>","summary":"<p>cut a node (a later call to <code>paste(obj)<\/code> would move the node)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"cut.jstree"},{"type":"param","types":["Array"],"name":"node","description":""}],"description":{"full":"<p>triggered when nodes are added to the buffer for moving<\/p>","summary":"<p>triggered when nodes are added to the buffer for moving<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"copy(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":"multiple objects can be passed using an array"},{"type":"trigger","string":"copy.jstree"}],"description":{"full":"<p>copy a node (a later call to <code>paste(obj)<\/code> would copy the node)<\/p>","summary":"<p>copy a node (a later call to <code>paste(obj)<\/code> would copy the node)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"copy.jstree"},{"type":"param","types":["Array"],"name":"node","description":""}],"description":{"full":"<p>triggered when nodes are added to the buffer for copying<\/p>","summary":"<p>triggered when nodes are added to the buffer for copying<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_buffer()"},{"type":"return","types":["Object"],"description":"an object consisting of `mode` (\"copy_node\" or \"move_node\"), `node` (an array of objects) and `inst` (the instance)"}],"description":{"full":"<p>get the current buffer (any nodes that are waiting for a paste operation)<\/p>","summary":"<p>get the current buffer (any nodes that are waiting for a paste operation)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"can_paste()"},{"type":"return","types":["Boolean"],"description":""}],"description":{"full":"<p>check if there is something in the buffer to paste<\/p>","summary":"<p>check if there is something in the buffer to paste<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"paste(obj [, pos])"},{"type":"param","types":["mixed"],"name":"obj","description":"the new parent"},{"type":"param","types":["mixed"],"name":"pos","description":"the position to insert at (besides integer, \"first\" and \"last\" are supported), defaults to integer `0`"},{"type":"trigger","string":"paste.jstree"}],"description":{"full":"<p>copy or move the previously cut or copied nodes to a new parent<\/p>","summary":"<p>copy or move the previously cut or copied nodes to a new parent<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"paste.jstree"},{"type":"param","types":["String"],"name":"parent","description":"the ID of the receiving node"},{"type":"param","types":["Array"],"name":"node","description":"the nodes in the buffer"},{"type":"param","types":["String"],"name":"mode","description":"the performed operation - \"copy_node\" or \"move_node\""}],"description":{"full":"<p>triggered when paste is invoked<\/p>","summary":"<p>triggered when paste is invoked<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"clear_buffer()"},{"type":"trigger","string":"clear_buffer.jstree"}],"description":{"full":"<p>clear the buffer of previously copied or cut nodes<\/p>","summary":"<p>clear the buffer of previously copied or cut nodes<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"clear_buffer.jstree"}],"description":{"full":"<p>triggered when the copy \/ cut buffer is cleared<\/p>","summary":"<p>triggered when the copy \/ cut buffer is cleared<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"edit(obj [, default_text, callback])"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"param","types":["String"],"name":"default_text","description":"the text to populate the input with (if omitted or set to a non-string value the node's text value is used)"},{"type":"param","types":["Function"],"name":"callback","description":"a function to be called once the text box is blurred, it is called in the instance's scope and receives the node and a status parameter - true if the rename is successful, false otherwise. You can access the node's title using .text"}],"description":{"full":"<p>put a node in edit mode (input field to rename the node)<\/p>","summary":"<p>put a node in edit mode (input field to rename the node)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[],"description":{"full":"<p>oi = obj.children(&quot;i:visible&quot;),<br \/>            ai = a.children(&quot;i:visible&quot;),<br \/>            w1 = oi.width() <em> oi.length,<br \/>            w2 = ai.width() <\/em> ai.length,<\/p>","summary":"<p>oi = obj.children(&quot;i:visible&quot;),<br \/>            ai = a.children(&quot;i:visible&quot;),<br \/>            w1 = oi.width() <em> oi.length,<br \/>            w2 = ai.width() <\/em> ai.length,<\/p>","body":""},"isPrivate":false,"ignore":true},{"tags":[{"type":"name","string":"set_theme(theme_name [, theme_url])"},{"type":"param","types":["String"],"name":"theme_name","description":"the name of the new theme to apply"},{"type":"param","types":["mixed"],"name":"theme_url","description":"the location of the CSS file for this theme. Omit or set to `false` if you manually included the file. Set to `true` to autoload from the `core.themes.dir` directory."},{"type":"trigger","string":"set_theme.jstree"}],"description":{"full":"<p>changes the theme<\/p>","summary":"<p>changes the theme<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"set_theme.jstree"},{"type":"param","types":["String"],"name":"theme","description":"the new theme"}],"description":{"full":"<p>triggered when a theme is set<\/p>","summary":"<p>triggered when a theme is set<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_theme()"},{"type":"return","types":["String"],"description":""}],"description":{"full":"<p>gets the name of the currently applied theme name<\/p>","summary":"<p>gets the name of the currently applied theme name<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"set_theme_variant(variant_name)"},{"type":"param","types":["String","Boolean"],"name":"variant_name","description":"the variant to apply (if `false` is used the current variant is removed)"}],"description":{"full":"<p>changes the theme variant (if the theme has variants)<\/p>","summary":"<p>changes the theme variant (if the theme has variants)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_theme()"},{"type":"return","types":["String"],"description":""}],"description":{"full":"<p>gets the name of the currently applied theme variant<\/p>","summary":"<p>gets the name of the currently applied theme variant<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"show_stripes()"}],"description":{"full":"<p>shows a striped background on the container (if the theme supports it)<\/p>","summary":"<p>shows a striped background on the container (if the theme supports it)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"hide_stripes()"}],"description":{"full":"<p>hides the striped background on the container<\/p>","summary":"<p>hides the striped background on the container<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"toggle_stripes()"}],"description":{"full":"<p>toggles the striped background on the container<\/p>","summary":"<p>toggles the striped background on the container<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"show_dots()"}],"description":{"full":"<p>shows the connecting dots (if the theme supports it)<\/p>","summary":"<p>shows the connecting dots (if the theme supports it)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"hide_dots()"}],"description":{"full":"<p>hides the connecting dots<\/p>","summary":"<p>hides the connecting dots<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"toggle_dots()"}],"description":{"full":"<p>toggles the connecting dots<\/p>","summary":"<p>toggles the connecting dots<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"show_icons()"}],"description":{"full":"<p>show the node icons<\/p>","summary":"<p>show the node icons<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"hide_icons()"}],"description":{"full":"<p>hide the node icons<\/p>","summary":"<p>hide the node icons<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"toggle_icons()"}],"description":{"full":"<p>toggle the node icons<\/p>","summary":"<p>toggle the node icons<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"set_icon(obj, icon)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"param","types":["String"],"name":"icon","description":"the new icon - can be a path to an icon or a className, if using an image that is in the current directory use a `.\/` prefix, otherwise it will be detected as a class"}],"description":{"full":"<p>set the node icon for a node<\/p>","summary":"<p>set the node icon for a node<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_icon(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"return","types":["String"],"description":""}],"description":{"full":"<p>get the node icon for a node<\/p>","summary":"<p>get the node icon for a node<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"hide_icon(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""}],"description":{"full":"<p>hide the icon on an individual node<\/p>","summary":"<p>hide the icon on an individual node<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"show_icon(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""}],"description":{"full":"<p>show the icon on an individual node<\/p>","summary":"<p>show the icon on an individual node<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[],"description":{"full":"<h3>Checkbox plugin<\/h3>\n<p>This plugin renders checkbox icons in front of each node, making multiple selection much easier.<br \/>It also supports tri-state behavior, meaning that if a node has a few of its children checked it will be rendered as undetermined, and state will be propagated up.<\/p>","summary":"<h3>Checkbox plugin<\/h3>\n","body":"<p>This plugin renders checkbox icons in front of each node, making multiple selection much easier.<br \/>It also supports tri-state behavior, meaning that if a node has a few of its children checked it will be rendered as undetermined, and state will be propagated up.<\/p>"},"isPrivate":false,"ignore":false,"ctx":{"type":"declaration","name":"_i","value":"document.createElement('I')","string":"_i"}},{"tags":[{"type":"name","string":"$.jstree.defaults.checkbox"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>stores all defaults for the checkbox plugin<\/p>","summary":"<p>stores all defaults for the checkbox plugin<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.checkbox.visible"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>a boolean indicating if checkboxes should be visible (can be changed at a later time using <code>show_checkboxes()<\/code> and <code>hide_checkboxes<\/code>). Defaults to <code>true<\/code>.<\/p>","summary":"<p>a boolean indicating if checkboxes should be visible (can be changed at a later time using <code>show_checkboxes()<\/code> and <code>hide_checkboxes<\/code>). Defaults to <code>true<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.checkbox.three_state"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>a boolean indicating if checkboxes should cascade down and have an undetermined state. Defaults to <code>true<\/code>.<\/p>","summary":"<p>a boolean indicating if checkboxes should cascade down and have an undetermined state. Defaults to <code>true<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.checkbox.whole_node"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>a boolean indicating if clicking anywhere on the node should act as clicking on the checkbox. Defaults to <code>true<\/code>.<\/p>","summary":"<p>a boolean indicating if clicking anywhere on the node should act as clicking on the checkbox. Defaults to <code>true<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.checkbox.keep_selected_style"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>a boolean indicating if the selected style of a node should be kept, or removed. Defaults to <code>true<\/code>.<\/p>","summary":"<p>a boolean indicating if the selected style of a node should be kept, or removed. Defaults to <code>true<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.checkbox.cascade"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>This setting controls how cascading and undetermined nodes are applied.<br \/>If &#39;up&#39; is in the string - cascading up is enabled, if &#39;down&#39; is in the string - cascading down is enabled, if &#39;undetermined&#39; is in the string - undetermined nodes will be used.<br \/>If <code>three_state<\/code> is set to <code>true<\/code> this setting is automatically set to &#39;up+down+undetermined&#39;. Defaults to &#39;&#39;.<\/p>","summary":"<p>This setting controls how cascading and undetermined nodes are applied.<br \/>If &#39;up&#39; is in the string - cascading up is enabled, if &#39;down&#39; is in the string - cascading down is enabled, if &#39;undetermined&#39; is in the string - undetermined nodes will be used.<br \/>If <code>three_state<\/code> is set to <code>true<\/code> this setting is automatically set to &#39;up+down+undetermined&#39;. Defaults to &#39;&#39;.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.checkbox.tie_selection"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>This setting controls if checkbox are bound to the general tree selection or to an internal array maintained by the checkbox plugin. Defaults to <code>true<\/code>, only set to <code>false<\/code> if you know exactly what you are doing.<\/p>","summary":"<p>This setting controls if checkbox are bound to the general tree selection or to an internal array maintained by the checkbox plugin. Defaults to <code>true<\/code>, only set to <code>false<\/code> if you know exactly what you are doing.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_undetermined()"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>set the undetermined state where and if necessary. Used internally.<\/p>","summary":"<p>set the undetermined state where and if necessary. Used internally.<\/p>","body":""},"isPrivate":true,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"_undetermined","string":"this._undetermined()"}},{"tags":[{"type":"name","string":"show_checkboxes()"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>show the node checkbox icons<\/p>","summary":"<p>show the node checkbox icons<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"show_checkboxes","string":"this.show_checkboxes()"}},{"tags":[{"type":"name","string":"hide_checkboxes()"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>hide the node checkbox icons<\/p>","summary":"<p>hide the node checkbox icons<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"hide_checkboxes","string":"this.hide_checkboxes()"}},{"tags":[{"type":"name","string":"toggle_checkboxes()"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>toggle the node icons<\/p>","summary":"<p>toggle the node icons<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"toggle_checkboxes","string":"this.toggle_checkboxes()"}},{"tags":[{"type":"name","string":"is_undetermined(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"return","types":["Boolean"],"description":""}],"description":{"full":"<p>checks if a node is in an undetermined state<\/p>","summary":"<p>checks if a node is in an undetermined state<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"is_undetermined","string":"this.is_undetermined()"}},{"tags":[{"type":"name","string":"check_node(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":"an array can be used to check multiple nodes"},{"type":"trigger","string":"check_node.jstree"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>check a node (only if tie_selection in checkbox settings is false, otherwise select_node will be called internally)<\/p>","summary":"<p>check a node (only if tie_selection in checkbox settings is false, otherwise select_node will be called internally)<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"check_node","string":"this.check_node()"}},{"tags":[{"type":"event","string":""},{"type":"name","string":"check_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":""},{"type":"param","types":["Array"],"name":"selected","description":"the current selection"},{"type":"param","types":["Object"],"name":"event","description":"the event (if any) that triggered this check_node"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>triggered when an node is checked (only if tie_selection in checkbox settings is false)<\/p>","summary":"<p>triggered when an node is checked (only if tie_selection in checkbox settings is false)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"uncheck_node(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":"an array can be used to uncheck multiple nodes"},{"type":"trigger","string":"uncheck_node.jstree"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>uncheck a node (only if tie_selection in checkbox settings is false, otherwise deselect_node will be called internally)<\/p>","summary":"<p>uncheck a node (only if tie_selection in checkbox settings is false, otherwise deselect_node will be called internally)<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"uncheck_node","string":"this.uncheck_node()"}},{"tags":[{"type":"event","string":""},{"type":"name","string":"uncheck_node.jstree"},{"type":"param","types":["Object"],"name":"node","description":""},{"type":"param","types":["Array"],"name":"selected","description":"the current selection"},{"type":"param","types":["Object"],"name":"event","description":"the event (if any) that triggered this uncheck_node"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>triggered when an node is unchecked (only if tie_selection in checkbox settings is false)<\/p>","summary":"<p>triggered when an node is unchecked (only if tie_selection in checkbox settings is false)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"check_all()"},{"type":"trigger","string":"check_all.jstree, changed.jstree"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>checks all nodes in the tree (only if tie_selection in checkbox settings is false, otherwise select_all will be called internally)<\/p>","summary":"<p>checks all nodes in the tree (only if tie_selection in checkbox settings is false, otherwise select_all will be called internally)<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"check_all","string":"this.check_all()"}},{"tags":[{"type":"event","string":""},{"type":"name","string":"check_all.jstree"},{"type":"param","types":["Array"],"name":"selected","description":"the current selection"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>triggered when all nodes are checked (only if tie_selection in checkbox settings is false)<\/p>","summary":"<p>triggered when all nodes are checked (only if tie_selection in checkbox settings is false)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"uncheck_all()"},{"type":"trigger","string":"uncheck_all.jstree"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>uncheck all checked nodes (only if tie_selection in checkbox settings is false, otherwise deselect_all will be called internally)<\/p>","summary":"<p>uncheck all checked nodes (only if tie_selection in checkbox settings is false, otherwise deselect_all will be called internally)<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"uncheck_all","string":"this.uncheck_all()"}},{"tags":[{"type":"event","string":""},{"type":"name","string":"uncheck_all.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the previous selection"},{"type":"param","types":["Array"],"name":"selected","description":"the current selection"},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>triggered when all nodes are unchecked (only if tie_selection in checkbox settings is false)<\/p>","summary":"<p>triggered when all nodes are unchecked (only if tie_selection in checkbox settings is false)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"is_checked(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":""},{"type":"return","types":["Boolean"],"description":""},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>checks if a node is checked (if tie_selection is on in the settings this function will return the same as is_selected)<\/p>","summary":"<p>checks if a node is checked (if tie_selection is on in the settings this function will return the same as is_selected)<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"is_checked","string":"this.is_checked()"}},{"tags":[{"type":"name","string":"get_checked([full])"},{"type":"param","types":["mixed"],"name":"full","description":"if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned"},{"type":"return","types":["Array"],"description":""},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>get an array of all checked nodes (if tie_selection is on in the settings this function will return the same as get_selected)<\/p>","summary":"<p>get an array of all checked nodes (if tie_selection is on in the settings this function will return the same as get_selected)<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"get_checked","string":"this.get_checked()"}},{"tags":[{"type":"name","string":"get_top_checked([full])"},{"type":"param","types":["mixed"],"name":"full","description":"if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned"},{"type":"return","types":["Array"],"description":""},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>get an array of all top level checked nodes (ignoring children of checked nodes) (if tie_selection is on in the settings this function will return the same as get_top_selected)<\/p>","summary":"<p>get an array of all top level checked nodes (ignoring children of checked nodes) (if tie_selection is on in the settings this function will return the same as get_top_selected)<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"get_top_checked","string":"this.get_top_checked()"}},{"tags":[{"type":"name","string":"get_bottom_checked([full])"},{"type":"param","types":["mixed"],"name":"full","description":"if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned"},{"type":"return","types":["Array"],"description":""},{"type":"plugin","string":"checkbox"}],"description":{"full":"<p>get an array of all bottom level checked nodes (ignoring selected parents) (if tie_selection is on in the settings this function will return the same as get_bottom_selected)<\/p>","summary":"<p>get an array of all bottom level checked nodes (ignoring selected parents) (if tie_selection is on in the settings this function will return the same as get_bottom_selected)<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"get_bottom_checked","string":"this.get_bottom_checked()"}},{"tags":[],"description":{"full":"<h3>Contextmenu plugin<\/h3>\n<p>Shows a context menu when a node is right-clicked.<\/p>","summary":"<h3>Contextmenu plugin<\/h3>\n","body":"<p>Shows a context menu when a node is right-clicked.<\/p>"},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.contextmenu"},{"type":"plugin","string":"contextmenu"}],"description":{"full":"<p>stores all defaults for the contextmenu plugin<\/p>","summary":"<p>stores all defaults for the contextmenu plugin<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.contextmenu.select_node"},{"type":"plugin","string":"contextmenu"}],"description":{"full":"<p>a boolean indicating if the node should be selected when the context menu is invoked on it. Defaults to <code>true<\/code>.<\/p>","summary":"<p>a boolean indicating if the node should be selected when the context menu is invoked on it. Defaults to <code>true<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.contextmenu.show_at_node"},{"type":"plugin","string":"contextmenu"}],"description":{"full":"<p>a boolean indicating if the menu should be shown aligned with the node. Defaults to <code>true<\/code>, otherwise the mouse coordinates are used.<\/p>","summary":"<p>a boolean indicating if the menu should be shown aligned with the node. Defaults to <code>true<\/code>, otherwise the mouse coordinates are used.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.contextmenu.items"},{"type":"plugin","string":"contextmenu"}],"description":{"full":"<p>an object of actions, or a function that accepts a node and a callback function and calls the callback function with an object of actions available for that node (you can also return the items too).<\/p><p>Each action consists of a key (a unique name) and a value which is an object with the following properties (only label and action are required):<\/p><ul>\n<li><code>separator_before<\/code> - a boolean indicating if there should be a separator before this item<\/li>\n<li><code>separator_after<\/code> - a boolean indicating if there should be a separator after this item<\/li>\n<li><code>_disabled<\/code> - a boolean indicating if this action should be disabled<\/li>\n<li><code>label<\/code> - a string - the name of the action (could be a function returning a string)<\/li>\n<li><code>action<\/code> - a function to be executed if this item is chosen<\/li>\n<li><code>icon<\/code> - a string, can be a path to an icon or a className, if using an image that is in the current directory use a <code>.\/<\/code> prefix, otherwise it will be detected as a class<\/li>\n<li><code>shortcut<\/code> - keyCode which will trigger the action if the menu is open (for example <code>113<\/code> for rename, which equals F2)<\/li>\n<li><code>shortcut_label<\/code> - shortcut label (like for example <code>F2<\/code> for rename)<\/li>\n<\/ul>\n","summary":"<p>an object of actions, or a function that accepts a node and a callback function and calls the callback function with an object of actions available for that node (you can also return the items too).<\/p>","body":"<p>Each action consists of a key (a unique name) and a value which is an object with the following properties (only label and action are required):<\/p><ul>\n<li><code>separator_before<\/code> - a boolean indicating if there should be a separator before this item<\/li>\n<li><code>separator_after<\/code> - a boolean indicating if there should be a separator after this item<\/li>\n<li><code>_disabled<\/code> - a boolean indicating if this action should be disabled<\/li>\n<li><code>label<\/code> - a string - the name of the action (could be a function returning a string)<\/li>\n<li><code>action<\/code> - a function to be executed if this item is chosen<\/li>\n<li><code>icon<\/code> - a string, can be a path to an icon or a className, if using an image that is in the current directory use a <code>.\/<\/code> prefix, otherwise it will be detected as a class<\/li>\n<li><code>shortcut<\/code> - keyCode which will trigger the action if the menu is open (for example <code>113<\/code> for rename, which equals F2)<\/li>\n<li><code>shortcut_label<\/code> - shortcut label (like for example <code>F2<\/code> for rename)<\/li>\n<\/ul>\n"},"isPrivate":false,"ignore":false},{"tags":[],"description":{"full":"<p>&quot;shortcut&quot;            : 113,<br \/>                    &quot;shortcut_label&quot;    : &#39;F2&#39;,<br \/>                    &quot;icon&quot;                : &quot;glyphicon glyphicon-leaf&quot;,<\/p>","summary":"<p>&quot;shortcut&quot;            : 113,<br \/>                    &quot;shortcut_label&quot;    : &#39;F2&#39;,<br \/>                    &quot;icon&quot;                : &quot;glyphicon glyphicon-leaf&quot;,<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[],"description":{"full":"<p>if(!(&#39;oncontextmenu&#39; in document.body) &amp;&amp; (&#39;ontouchstart&#39; in document.body)) {<br \/>                var el = null, tm = null;<br \/>                this.element<br \/>                    .on(&quot;touchstart&quot;, &quot;.jstree-anchor&quot;, function (e) {<br \/>                        el = e.currentTarget;<br \/>                        tm = +new Date();<br \/>                        $(document).one(&quot;touchend&quot;, function (e) {<br \/>                            e.target = document.elementFromPoint(e.originalEvent.targetTouches[0].pageX - window.pageXOffset, e.originalEvent.targetTouches[0].pageY - window.pageYOffset);<br \/>                            e.currentTarget = e.target;<br \/>                            tm = ((+(new Date())) - tm);<br \/>                            if(e.target === el &amp;&amp; tm &gt; 600 &amp;&amp; tm &lt; 1000) {<br \/>                                e.preventDefault();<br \/>                                $(el).trigger(&#39;contextmenu&#39;, e);<br \/>                            }<br \/>                            el = null;<br \/>                            tm = null;<br \/>                        });<br \/>                    });<br \/>            }<\/p>","summary":"<p>if(!(&#39;oncontextmenu&#39; in document.body) &amp;&amp; (&#39;ontouchstart&#39; in document.body)) {<br \/>                var el = null, tm = null;<br \/>                this.element<br \/>                    .on(&quot;touchstart&quot;, &quot;.jstree-anchor&quot;, function (e) {<br \/>                        el = e.currentTarget;<br \/>                        tm = +new Date();<br \/>                        $(document).one(&quot;touchend&quot;, function (e) {<br \/>                            e.target = document.elementFromPoint(e.originalEvent.targetTouches[0].pageX - window.pageXOffset, e.originalEvent.targetTouches[0].pageY - window.pageYOffset);<br \/>                            e.currentTarget = e.target;<br \/>                            tm = ((+(new Date())) - tm);<br \/>                            if(e.target === el &amp;&amp; tm &gt; 600 &amp;&amp; tm &lt; 1000) {<br \/>                                e.preventDefault();<br \/>                                $(el).trigger(&#39;contextmenu&#39;, e);<br \/>                            }<br \/>                            el = null;<br \/>                            tm = null;<br \/>                        });<br \/>                    });<br \/>            }<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"show_contextmenu(obj [, x, y])"},{"type":"param","types":["mixed"],"name":"obj","description":"the node"},{"type":"param","types":["Number"],"name":"x","description":"the x-coordinate relative to the document to show the menu at"},{"type":"param","types":["Number"],"name":"y","description":"the y-coordinate relative to the document to show the menu at"},{"type":"param","types":["Object"],"name":"e","description":"the event if available that triggered the contextmenu"},{"type":"plugin","string":"contextmenu"},{"type":"trigger","string":"show_contextmenu.jstree"}],"description":{"full":"<p>prepare and show the context menu for a node<\/p>","summary":"<p>prepare and show the context menu for a node<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"show_contextmenu","string":"this.show_contextmenu()"}},{"tags":[{"type":"name","string":"_show_contextmenu(obj, x, y, i)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node"},{"type":"param","types":["Number"],"name":"x","description":"the x-coordinate relative to the document to show the menu at"},{"type":"param","types":["Number"],"name":"y","description":"the y-coordinate relative to the document to show the menu at"},{"type":"param","types":["Number"],"name":"i","description":"the object of items to show"},{"type":"plugin","string":"contextmenu"},{"type":"trigger","string":"show_contextmenu.jstree"},{"type":"private","visibility":"private"}],"description":{"full":"<p>show the prepared context menu for a node<\/p>","summary":"<p>show the prepared context menu for a node<\/p>","body":""},"isPrivate":true,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"_show_contextmenu","string":"this._show_contextmenu()"}},{"tags":[{"type":"event","string":""},{"type":"name","string":"show_contextmenu.jstree"},{"type":"param","types":["Object"],"name":"node","description":"the node"},{"type":"param","types":["Number"],"name":"x","description":"the x-coordinate of the menu relative to the document"},{"type":"param","types":["Number"],"name":"y","description":"the y-coordinate of the menu relative to the document"},{"type":"plugin","string":"contextmenu"}],"description":{"full":"<p>triggered when the contextmenu is shown for a node<\/p>","summary":"<p>triggered when the contextmenu is shown for a node<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"plugin","string":"contextmenu"},{"type":"name","string":"context_parse.vakata"},{"type":"param","types":["jQuery"],"name":"reference","description":"the element that was right clicked"},{"type":"param","types":["jQuery"],"name":"element","description":"the DOM element of the menu itself"},{"type":"param","types":["Object"],"name":"position","description":"the x & y coordinates of the menu"}],"description":{"full":"<p>triggered on the document when the contextmenu is parsed (HTML is built)<\/p>","summary":"<p>triggered on the document when the contextmenu is parsed (HTML is built)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"plugin","string":"contextmenu"},{"type":"name","string":"context_show.vakata"},{"type":"param","types":["jQuery"],"name":"reference","description":"the element that was right clicked"},{"type":"param","types":["jQuery"],"name":"element","description":"the DOM element of the menu itself"},{"type":"param","types":["Object"],"name":"position","description":"the x & y coordinates of the menu"}],"description":{"full":"<p>triggered on the document when the contextmenu is shown<\/p>","summary":"<p>triggered on the document when the contextmenu is shown<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"plugin","string":"contextmenu"},{"type":"name","string":"context_hide.vakata"},{"type":"param","types":["jQuery"],"name":"reference","description":"the element that was right clicked"},{"type":"param","types":["jQuery"],"name":"element","description":"the DOM element of the menu itself"},{"type":"param","types":["Object"],"name":"position","description":"the x & y coordinates of the menu"}],"description":{"full":"<p>triggered on the document when the contextmenu is hidden<\/p>","summary":"<p>triggered on the document when the contextmenu is hidden<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[],"description":{"full":"<h3>Drag&#39;n&#39;drop plugin<\/h3>\n<p>Enables dragging and dropping of nodes in the tree, resulting in a move or copy operations.<\/p>","summary":"<h3>Drag&#39;n&#39;drop plugin<\/h3>\n","body":"<p>Enables dragging and dropping of nodes in the tree, resulting in a move or copy operations.<\/p>"},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.dnd"},{"type":"plugin","string":"dnd"}],"description":{"full":"<p>stores all defaults for the drag&#39;n&#39;drop plugin<\/p>","summary":"<p>stores all defaults for the drag&#39;n&#39;drop plugin<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.dnd.copy"},{"type":"plugin","string":"dnd"}],"description":{"full":"<p>a boolean indicating if a copy should be possible while dragging (by pressint the meta key or Ctrl). Defaults to <code>true<\/code>.<\/p>","summary":"<p>a boolean indicating if a copy should be possible while dragging (by pressint the meta key or Ctrl). Defaults to <code>true<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.dnd.open_timeout"},{"type":"plugin","string":"dnd"}],"description":{"full":"<p>a number indicating how long a node should remain hovered while dragging to be opened. Defaults to <code>500<\/code>.<\/p>","summary":"<p>a number indicating how long a node should remain hovered while dragging to be opened. Defaults to <code>500<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.dnd.is_draggable"},{"type":"plugin","string":"dnd"}],"description":{"full":"<p>a function invoked each time a node is about to be dragged, invoked in the tree&#39;s scope and receives the nodes about to be dragged as an argument (array) - return <code>false<\/code> to prevent dragging<\/p>","summary":"<p>a function invoked each time a node is about to be dragged, invoked in the tree&#39;s scope and receives the nodes about to be dragged as an argument (array) - return <code>false<\/code> to prevent dragging<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.dnd.check_while_dragging"},{"type":"plugin","string":"dnd"}],"description":{"full":"<p>a boolean indicating if checks should constantly be made while the user is dragging the node (as opposed to checking only on drop), default is <code>true<\/code><\/p>","summary":"<p>a boolean indicating if checks should constantly be made while the user is dragging the node (as opposed to checking only on drop), default is <code>true<\/code><\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.dnd.always_copy"},{"type":"plugin","string":"dnd"}],"description":{"full":"<p>a boolean indicating if nodes from this tree should only be copied with dnd (as opposed to moved), default is <code>false<\/code><\/p>","summary":"<p>a boolean indicating if nodes from this tree should only be copied with dnd (as opposed to moved), default is <code>false<\/code><\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.dnd.inside_pos"},{"type":"plugin","string":"dnd"}],"description":{"full":"<p>when dropping a node &quot;inside&quot;, this setting indicates the position the node should go to - it can be an integer or a string: &quot;first&quot; (same as 0) or &quot;last&quot;, default is <code>0<\/code><\/p>","summary":"<p>when dropping a node &quot;inside&quot;, this setting indicates the position the node should go to - it can be an integer or a string: &quot;first&quot; (same as 0) or &quot;last&quot;, default is <code>0<\/code><\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.dnd.drag_selection"},{"type":"plugin","string":"dnd"}],"description":{"full":"<p>when starting the drag on a node that is selected this setting controls if all selected nodes are dragged or only the single node, default is <code>true<\/code>, which means all selected nodes are dragged when the drag is started on a selected node<\/p>","summary":"<p>when starting the drag on a node that is selected this setting controls if all selected nodes are dragged or only the single node, default is <code>true<\/code>, which means all selected nodes are dragged when the drag is started on a selected node<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.dnd.touch"},{"type":"plugin","string":"dnd"}],"description":{"full":"<p>controls whether dnd works on touch devices. If left as boolean true dnd will work the same as in desktop browsers, which in some cases may impair scrolling. If set to boolean false dnd will not work on touch devices. There is a special third option - string &quot;selected&quot; which means only selected nodes can be dragged on touch devices.<\/p>","summary":"<p>controls whether dnd works on touch devices. If left as boolean true dnd will work the same as in desktop browsers, which in some cases may impair scrolling. If set to boolean false dnd will not work on touch devices. There is a special third option - string &quot;selected&quot; which means only selected nodes can be dragged on touch devices.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.dnd.large_drop_target"},{"type":"plugin","string":"dnd"}],"description":{"full":"<p>controls whether items can be dropped anywhere on the node, not just on the anchor, by default only the node anchor is a valid drop target. Works best with the wholerow plugin. If enabled on mobile depending on the interface it might be hard for the user to cancel the drop, since the whole tree container will be a valid drop target.<\/p>","summary":"<p>controls whether items can be dropped anywhere on the node, not just on the anchor, by default only the node anchor is a valid drop target. Works best with the wholerow plugin. If enabled on mobile depending on the interface it might be hard for the user to cancel the drop, since the whole tree container will be a valid drop target.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.dnd.large_drag_target"},{"type":"plugin","string":"dnd"}],"description":{"full":"<p>controls whether a drag can be initiated from any part of the node and not just the text\/icon part, works best with the wholerow plugin. Keep in mind it can cause problems with tree scrolling on mobile depending on the interface - in that case set the touch option to &quot;selected&quot;.<\/p>","summary":"<p>controls whether a drag can be initiated from any part of the node and not just the text\/icon part, works best with the wholerow plugin. Keep in mind it can cause problems with tree scrolling on mobile depending on the interface - in that case set the touch option to &quot;selected&quot;.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"plugin","string":"dnd"},{"type":"name","string":"dnd_scroll.vakata"},{"type":"param","types":["Mixed"],"name":"data","description":"any data supplied with the call to $.vakata.dnd.start"},{"type":"param","types":["DOM"],"name":"element","description":"the DOM element being dragged"},{"type":"param","types":["jQuery"],"name":"helper","description":"the helper shown next to the mouse"},{"type":"param","types":["jQuery"],"name":"event","description":"the element that is scrolling"}],"description":{"full":"<p>triggered on the document when a drag causes an element to scroll<\/p>","summary":"<p>triggered on the document when a drag causes an element to scroll<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"plugin","string":"dnd"},{"type":"name","string":"dnd_start.vakata"},{"type":"param","types":["Mixed"],"name":"data","description":"any data supplied with the call to $.vakata.dnd.start"},{"type":"param","types":["DOM"],"name":"element","description":"the DOM element being dragged"},{"type":"param","types":["jQuery"],"name":"helper","description":"the helper shown next to the mouse"},{"type":"param","types":["Object"],"name":"event","description":"the event that caused the start (probably mousemove)"}],"description":{"full":"<p>triggered on the document when a drag starts<\/p>","summary":"<p>triggered on the document when a drag starts<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"plugin","string":"dnd"},{"type":"name","string":"dnd_move.vakata"},{"type":"param","types":["Mixed"],"name":"data","description":"any data supplied with the call to $.vakata.dnd.start"},{"type":"param","types":["DOM"],"name":"element","description":"the DOM element being dragged"},{"type":"param","types":["jQuery"],"name":"helper","description":"the helper shown next to the mouse"},{"type":"param","types":["Object"],"name":"event","description":"the event that caused this to trigger (most likely mousemove)"}],"description":{"full":"<p>triggered on the document when a drag is in progress<\/p>","summary":"<p>triggered on the document when a drag is in progress<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"plugin","string":"dnd"},{"type":"name","string":"dnd_stop.vakata"},{"type":"param","types":["Mixed"],"name":"data","description":"any data supplied with the call to $.vakata.dnd.start"},{"type":"param","types":["DOM"],"name":"element","description":"the DOM element being dragged"},{"type":"param","types":["jQuery"],"name":"helper","description":"the helper shown next to the mouse"},{"type":"param","types":["Object"],"name":"event","description":"the event that caused the stop"}],"description":{"full":"<p>triggered on the document when a drag stops (the dragged element is dropped)<\/p>","summary":"<p>triggered on the document when a drag stops (the dragged element is dropped)<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[],"description":{"full":"<h3>Massload plugin<\/h3>\n<p>Adds massload functionality to jsTree, so that multiple nodes can be loaded in a single request (only useful with lazy loading).<\/p>","summary":"<h3>Massload plugin<\/h3>\n","body":"<p>Adds massload functionality to jsTree, so that multiple nodes can be loaded in a single request (only useful with lazy loading).<\/p>"},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.massload"},{"type":"plugin","string":"massload"}],"description":{"full":"<p>massload configuration<\/p><p>It is possible to set this to a standard jQuery-like AJAX config.<br \/>In addition to the standard jQuery ajax options here you can supply functions for <code>data<\/code> and <code>url<\/code>, the functions will be run in the current instance&#39;s scope and a param will be passed indicating which node IDs need to be loaded, the return value of those functions will be used.<\/p><p>You can also set this to a function, that function will receive the node IDs being loaded as argument and a second param which is a function (callback) which should be called with the result.<\/p><p>Both the AJAX and the function approach rely on the same return value - an object where the keys are the node IDs, and the value is the children of that node as an array.<\/p><pre><code>{\n    &quot;id1&quot; : [{ &quot;text&quot; : &quot;Child of ID1&quot;, &quot;id&quot; : &quot;c1&quot; }, { &quot;text&quot; : &quot;Another child of ID1&quot;, &quot;id&quot; : &quot;c2&quot; }],\n    &quot;id2&quot; : [{ &quot;text&quot; : &quot;Child of ID2&quot;, &quot;id&quot; : &quot;c3&quot; }]\n}\n<\/code><\/pre>","summary":"<p>massload configuration<\/p>","body":"<p>It is possible to set this to a standard jQuery-like AJAX config.<br \/>In addition to the standard jQuery ajax options here you can supply functions for <code>data<\/code> and <code>url<\/code>, the functions will be run in the current instance&#39;s scope and a param will be passed indicating which node IDs need to be loaded, the return value of those functions will be used.<\/p><p>You can also set this to a function, that function will receive the node IDs being loaded as argument and a second param which is a function (callback) which should be called with the result.<\/p><p>Both the AJAX and the function approach rely on the same return value - an object where the keys are the node IDs, and the value is the children of that node as an array.<\/p><pre><code>{\n    &quot;id1&quot; : [{ &quot;text&quot; : &quot;Child of ID1&quot;, &quot;id&quot; : &quot;c1&quot; }, { &quot;text&quot; : &quot;Another child of ID1&quot;, &quot;id&quot; : &quot;c2&quot; }],\n    &quot;id2&quot; : [{ &quot;text&quot; : &quot;Child of ID2&quot;, &quot;id&quot; : &quot;c3&quot; }]\n}\n<\/code><\/pre>"},"isPrivate":false,"ignore":false},{"tags":[],"description":{"full":"<h3>Search plugin<\/h3>\n<p>Adds search functionality to jsTree.<\/p>","summary":"<h3>Search plugin<\/h3>\n","body":"<p>Adds search functionality to jsTree.<\/p>"},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.search"},{"type":"plugin","string":"search"}],"description":{"full":"<p>stores all defaults for the search plugin<\/p>","summary":"<p>stores all defaults for the search plugin<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.search.ajax"},{"type":"plugin","string":"search"}],"description":{"full":"<p>a jQuery-like AJAX config, which jstree uses if a server should be queried for results. <\/p><p>A <code>str<\/code> (which is the search string) parameter will be added with the request, an optional <code>inside<\/code> parameter will be added if the search is limited to a node id. The expected result is a JSON array with nodes that need to be opened so that matching nodes will be revealed.<br \/>Leave this setting as <code>false<\/code> to not query the server. You can also set this to a function, which will be invoked in the instance&#39;s scope and receive 3 parameters - the search string, the callback to call with the array of nodes to load, and the optional node ID to limit the search to <\/p>","summary":"<p>a jQuery-like AJAX config, which jstree uses if a server should be queried for results. <\/p>","body":"<p>A <code>str<\/code> (which is the search string) parameter will be added with the request, an optional <code>inside<\/code> parameter will be added if the search is limited to a node id. The expected result is a JSON array with nodes that need to be opened so that matching nodes will be revealed.<br \/>Leave this setting as <code>false<\/code> to not query the server. You can also set this to a function, which will be invoked in the instance&#39;s scope and receive 3 parameters - the search string, the callback to call with the array of nodes to load, and the optional node ID to limit the search to <\/p>"},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.search.fuzzy"},{"type":"plugin","string":"search"}],"description":{"full":"<p>Indicates if the search should be fuzzy or not (should <code>chnd3<\/code> match <code>child node 3<\/code>). Default is <code>false<\/code>.<\/p>","summary":"<p>Indicates if the search should be fuzzy or not (should <code>chnd3<\/code> match <code>child node 3<\/code>). Default is <code>false<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.search.case_sensitive"},{"type":"plugin","string":"search"}],"description":{"full":"<p>Indicates if the search should be case sensitive. Default is <code>false<\/code>.<\/p>","summary":"<p>Indicates if the search should be case sensitive. Default is <code>false<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.search.show_only_matches"},{"type":"plugin","string":"search"}],"description":{"full":"<p>Indicates if the tree should be filtered (by default) to show only matching nodes (keep in mind this can be a heavy on large trees in old browsers).<br \/>This setting can be changed at runtime when calling the search method. Default is <code>false<\/code>.<\/p>","summary":"<p>Indicates if the tree should be filtered (by default) to show only matching nodes (keep in mind this can be a heavy on large trees in old browsers).<br \/>This setting can be changed at runtime when calling the search method. Default is <code>false<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.search.show_only_matches_children"},{"type":"plugin","string":"search"}],"description":{"full":"<p>Indicates if the children of matched element are shown (when show_only_matches is true)<br \/>This setting can be changed at runtime when calling the search method. Default is <code>false<\/code>.<\/p>","summary":"<p>Indicates if the children of matched element are shown (when show_only_matches is true)<br \/>This setting can be changed at runtime when calling the search method. Default is <code>false<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.search.close_opened_onclear"},{"type":"plugin","string":"search"}],"description":{"full":"<p>Indicates if all nodes opened to reveal the search result, should be closed when the search is cleared or a new search is performed. Default is <code>true<\/code>.<\/p>","summary":"<p>Indicates if all nodes opened to reveal the search result, should be closed when the search is cleared or a new search is performed. Default is <code>true<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.search.search_leaves_only"},{"type":"plugin","string":"search"}],"description":{"full":"<p>Indicates if only leaf nodes should be included in search results. Default is <code>false<\/code>.<\/p>","summary":"<p>Indicates if only leaf nodes should be included in search results. Default is <code>false<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.search.search_callback"},{"type":"plugin","string":"search"}],"description":{"full":"<p>If set to a function it wil be called in the instance&#39;s scope with two arguments - search string and node (where node will be every node in the structure, so use with caution).<br \/>If the function returns a truthy value the node will be considered a match (it might not be displayed if search_only_leaves is set to true and the node is not a leaf). Default is <code>false<\/code>.<\/p>","summary":"<p>If set to a function it wil be called in the instance&#39;s scope with two arguments - search string and node (where node will be every node in the structure, so use with caution).<br \/>If the function returns a truthy value the node will be considered a match (it might not be displayed if search_only_leaves is set to true and the node is not a leaf). Default is <code>false<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"search(str [, skip_async])"},{"type":"param","types":["String"],"name":"str","description":"the search string"},{"type":"param","types":["Boolean"],"name":"skip_async","description":"if set to true server will not be queried even if configured"},{"type":"param","types":["Boolean"],"name":"show_only_matches","description":"if set to true only matching nodes will be shown (keep in mind this can be very slow on large trees or old browsers)"},{"type":"param","types":["mixed"],"name":"inside","description":"an optional node to whose children to limit the search"},{"type":"param","types":["Boolean"],"name":"append","description":"if set to true the results of this search are appended to the previous search"},{"type":"plugin","string":"search"},{"type":"trigger","string":"search.jstree"}],"description":{"full":"<p>used to search the tree nodes for a given string<\/p>","summary":"<p>used to search the tree nodes for a given string<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"search","string":"this.search()"}},{"tags":[{"type":"event","string":""},{"type":"name","string":"search.jstree"},{"type":"param","types":["jQuery"],"name":"nodes","description":"a jQuery collection of matching nodes"},{"type":"param","types":["String"],"name":"str","description":"the search string"},{"type":"param","types":["Array"],"name":"res","description":"a collection of objects represeing the matching nodes"},{"type":"plugin","string":"search"}],"description":{"full":"<p>triggered after search is complete<\/p>","summary":"<p>triggered after search is complete<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"clear_search()"},{"type":"plugin","string":"search"},{"type":"trigger","string":"clear_search.jstree"}],"description":{"full":"<p>used to clear the last search (removes classes and shows all nodes if filtering is on)<\/p>","summary":"<p>used to clear the last search (removes classes and shows all nodes if filtering is on)<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"clear_search","string":"this.clear_search()"}},{"tags":[{"type":"event","string":""},{"type":"name","string":"clear_search.jstree"},{"type":"param","types":["jQuery"],"name":"nodes","description":"a jQuery collection of matching nodes (the result from the last search)"},{"type":"param","types":["String"],"name":"str","description":"the search string (the last search string)"},{"type":"param","types":["Array"],"name":"res","description":"a collection of objects represeing the matching nodes (the result from the last search)"},{"type":"plugin","string":"search"}],"description":{"full":"<p>triggered after search is complete<\/p>","summary":"<p>triggered after search is complete<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"_search_open(d)"},{"type":"param","types":["Array"],"name":"d","description":"an array of node IDs"},{"type":"plugin","string":"search"}],"description":{"full":"<p>opens nodes that need to be opened to reveal the search results. Used only internally.<\/p>","summary":"<p>opens nodes that need to be opened to reveal the search results. Used only internally.<\/p>","body":""},"isPrivate":true,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"_search_open","string":"this._search_open()"}},{"tags":[],"description":{"full":"<h3>Sort plugin<\/h3>\n<p>Automatically sorts all siblings in the tree according to a sorting function.<\/p>","summary":"<h3>Sort plugin<\/h3>\n","body":"<p>Automatically sorts all siblings in the tree according to a sorting function.<\/p>"},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.sort"},{"type":"plugin","string":"sort"}],"description":{"full":"<p>the settings function used to sort the nodes.<br \/>It is executed in the tree&#39;s context, accepts two nodes as arguments and should return <code>1<\/code> or <code>-1<\/code>.<\/p>","summary":"<p>the settings function used to sort the nodes.<br \/>It is executed in the tree&#39;s context, accepts two nodes as arguments and should return <code>1<\/code> or <code>-1<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"$.jstree.defaults","name":"sort","string":"$.jstree.defaults.sort()"}},{"tags":[{"type":"private","visibility":"private"},{"type":"name","string":"sort(obj [, deep])"},{"type":"param","types":["mixed"],"name":"obj","description":"the node"},{"type":"param","types":["Boolean"],"name":"deep","description":"if set to `true` nodes are sorted recursively."},{"type":"plugin","string":"sort"},{"type":"trigger","string":"search.jstree"}],"description":{"full":"<p>used to sort a node&#39;s children<\/p>","summary":"<p>used to sort a node&#39;s children<\/p>","body":""},"isPrivate":true,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"sort","string":"this.sort()"}},{"tags":[],"description":{"full":"<h3>State plugin<\/h3>\n<p>Saves the state of the tree (selected nodes, opened nodes) on the user&#39;s computer using available options (localStorage, cookies, etc)<\/p>","summary":"<h3>State plugin<\/h3>\n","body":"<p>Saves the state of the tree (selected nodes, opened nodes) on the user&#39;s computer using available options (localStorage, cookies, etc)<\/p>"},"isPrivate":false,"ignore":false,"ctx":{"type":"declaration","name":"to","value":"false","string":"to"}},{"tags":[{"type":"name","string":"$.jstree.defaults.state"},{"type":"plugin","string":"state"}],"description":{"full":"<p>stores all defaults for the state plugin<\/p>","summary":"<p>stores all defaults for the state plugin<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.state.key"},{"type":"plugin","string":"state"}],"description":{"full":"<p>A string for the key to use when saving the current tree (change if using multiple trees in your project). Defaults to <code>jstree<\/code>.<\/p>","summary":"<p>A string for the key to use when saving the current tree (change if using multiple trees in your project). Defaults to <code>jstree<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.state.events"},{"type":"plugin","string":"state"}],"description":{"full":"<p>A space separated list of events that trigger a state save. Defaults to <code>changed.jstree open_node.jstree close_node.jstree<\/code>.<\/p>","summary":"<p>A space separated list of events that trigger a state save. Defaults to <code>changed.jstree open_node.jstree close_node.jstree<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.state.ttl"},{"type":"plugin","string":"state"}],"description":{"full":"<p>Time in milliseconds after which the state will expire. Defaults to &#39;false&#39; meaning - no expire.<\/p>","summary":"<p>Time in milliseconds after which the state will expire. Defaults to &#39;false&#39; meaning - no expire.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.state.filter"},{"type":"plugin","string":"state"}],"description":{"full":"<p>A function that will be executed prior to restoring state with one argument - the state object. Can be used to clear unwanted parts of the state.<\/p>","summary":"<p>A function that will be executed prior to restoring state with one argument - the state object. Can be used to clear unwanted parts of the state.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"event","string":""},{"type":"name","string":"state_ready.jstree"},{"type":"plugin","string":"state"}],"description":{"full":"<p>triggered when the state plugin is finished restoring the state (and immediately after ready if there is no state to restore).<\/p>","summary":"<p>triggered when the state plugin is finished restoring the state (and immediately after ready if there is no state to restore).<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"save_state()"},{"type":"plugin","string":"state"}],"description":{"full":"<p>save the state<\/p>","summary":"<p>save the state<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"save_state","string":"this.save_state()"}},{"tags":[{"type":"name","string":"restore_state()"},{"type":"plugin","string":"state"}],"description":{"full":"<p>restore the state from the user&#39;s computer<\/p>","summary":"<p>restore the state from the user&#39;s computer<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"restore_state","string":"this.restore_state()"}},{"tags":[{"type":"name","string":"clear_state()"},{"type":"plugin","string":"state"}],"description":{"full":"<p>clear the state on the user&#39;s computer<\/p>","summary":"<p>clear the state on the user&#39;s computer<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"clear_state","string":"this.clear_state()"}},{"tags":[],"description":{"full":"<h3>Types plugin<\/h3>\n<p>Makes it possible to add predefined types for groups of nodes, which make it possible to easily control nesting rules and icon for each group.<\/p>","summary":"<h3>Types plugin<\/h3>\n","body":"<p>Makes it possible to add predefined types for groups of nodes, which make it possible to easily control nesting rules and icon for each group.<\/p>"},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.types"},{"type":"plugin","string":"types"}],"description":{"full":"<p>An object storing all types as key value pairs, where the key is the type name and the value is an object that could contain following keys (all optional).<\/p><ul>\n<li><code>max_children<\/code> the maximum number of immediate children this node type can have. Do not specify or set to <code>-1<\/code> for unlimited.<\/li>\n<li><code>max_depth<\/code> the maximum number of nesting this node type can have. A value of <code>1<\/code> would mean that the node can have children, but no grandchildren. Do not specify or set to <code>-1<\/code> for unlimited.<\/li>\n<li><code>valid_children<\/code> an array of node type strings, that nodes of this type can have as children. Do not specify or set to <code>-1<\/code> for no limits.<\/li>\n<li><code>icon<\/code> a string - can be a path to an icon or a className, if using an image that is in the current directory use a <code>.\/<\/code> prefix, otherwise it will be detected as a class. Omit to use the default icon from your theme.<\/li>\n<\/ul>\n<p>There are two predefined types:<\/p><ul>\n<li><code>#<\/code> represents the root of the tree, for example <code>max_children<\/code> would control the maximum number of root nodes.<\/li>\n<li><code>default<\/code> represents the default node - any settings here will be applied to all nodes that do not have a type specified.<\/li>\n<\/ul>\n","summary":"<p>An object storing all types as key value pairs, where the key is the type name and the value is an object that could contain following keys (all optional).<\/p>","body":"<ul>\n<li><code>max_children<\/code> the maximum number of immediate children this node type can have. Do not specify or set to <code>-1<\/code> for unlimited.<\/li>\n<li><code>max_depth<\/code> the maximum number of nesting this node type can have. A value of <code>1<\/code> would mean that the node can have children, but no grandchildren. Do not specify or set to <code>-1<\/code> for unlimited.<\/li>\n<li><code>valid_children<\/code> an array of node type strings, that nodes of this type can have as children. Do not specify or set to <code>-1<\/code> for no limits.<\/li>\n<li><code>icon<\/code> a string - can be a path to an icon or a className, if using an image that is in the current directory use a <code>.\/<\/code> prefix, otherwise it will be detected as a class. Omit to use the default icon from your theme.<\/li>\n<\/ul>\n<p>There are two predefined types:<\/p><ul>\n<li><code>#<\/code> represents the root of the tree, for example <code>max_children<\/code> would control the maximum number of root nodes.<\/li>\n<li><code>default<\/code> represents the default node - any settings here will be applied to all nodes that do not have a type specified.<\/li>\n<\/ul>\n"},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"get_rules(obj)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to find the rules for"},{"type":"return","types":["Object"],"description":""},{"type":"plugin","string":"types"}],"description":{"full":"<p>used to retrieve the type settings object for a node<\/p>","summary":"<p>used to retrieve the type settings object for a node<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"get_rules","string":"this.get_rules()"}},{"tags":[{"type":"name","string":"get_type(obj [, rules])"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to find the rules for"},{"type":"param","types":["Boolean"],"name":"rules","description":"if set to `true` instead of a string the settings object will be returned"},{"type":"return","types":["String","Object"],"description":""},{"type":"plugin","string":"types"}],"description":{"full":"<p>used to retrieve the type string or settings object for a node<\/p>","summary":"<p>used to retrieve the type string or settings object for a node<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"get_type","string":"this.get_type()"}},{"tags":[{"type":"name","string":"set_type(obj, type)"},{"type":"param","types":["mixed"],"name":"obj","description":"the node to change"},{"type":"param","types":["String"],"name":"type","description":"the new type"},{"type":"plugin","string":"types"}],"description":{"full":"<p>used to change a node&#39;s type<\/p>","summary":"<p>used to change a node&#39;s type<\/p>","body":""},"isPrivate":false,"ignore":false,"ctx":{"type":"method","receiver":"this","name":"set_type","string":"this.set_type()"}},{"tags":[],"description":{"full":"<h3>Unique plugin<\/h3>\n<p>Enforces that no nodes with the same name can coexist as siblings.<\/p>","summary":"<h3>Unique plugin<\/h3>\n","body":"<p>Enforces that no nodes with the same name can coexist as siblings.<\/p>"},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.unique"},{"type":"plugin","string":"unique"}],"description":{"full":"<p>stores all defaults for the unique plugin<\/p>","summary":"<p>stores all defaults for the unique plugin<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.unique.case_sensitive"},{"type":"plugin","string":"unique"}],"description":{"full":"<p>Indicates if the comparison should be case sensitive. Default is <code>false<\/code>.<\/p>","summary":"<p>Indicates if the comparison should be case sensitive. Default is <code>false<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[{"type":"name","string":"$.jstree.defaults.unique.duplicate"},{"type":"plugin","string":"unique"}],"description":{"full":"<p>A callback executed in the instance&#39;s scope when a new node is created and the name is already taken, the two arguments are the conflicting name and the counter. The default will produce results like <code>New node (2)<\/code>.<\/p>","summary":"<p>A callback executed in the instance&#39;s scope when a new node is created and the name is already taken, the two arguments are the conflicting name and the counter. The default will produce results like <code>New node (2)<\/code>.<\/p>","body":""},"isPrivate":false,"ignore":false},{"tags":[],"description":{"full":"<h3>Wholerow plugin<\/h3>\n<p>Makes each node appear block level. Making selection easier. May cause slow down for large trees in old browsers.<\/p>","summary":"<h3>Wholerow plugin<\/h3>\n","body":"<p>Makes each node appear block level. Making selection easier. May cause slow down for large trees in old browsers.<\/p>"},"isPrivate":false,"ignore":false,"ctx":{"type":"declaration","name":"div","value":"document.createElement('DIV')","string":"div"}},{"tags":[],"description":{"full":"<p>.on(&quot;mousedown.jstree touchstart.jstree&quot;, &quot;.jstree-wholerow&quot;, function (e) {<br \/>                        if(e.target === e.currentTarget) {<br \/>                            var a = $(e.currentTarget).closest(&quot;.jstree-node&quot;).children(&quot;.jstree-anchor&quot;);<br \/>                            e.target = a[0];<br \/>                            a.trigger(e);<br \/>                        }<br \/>                    })<\/p>","summary":"<p>.on(&quot;mousedown.jstree touchstart.jstree&quot;, &quot;.jstree-wholerow&quot;, function (e) {<br \/>                        if(e.target === e.currentTarget) {<br \/>                            var a = $(e.currentTarget).closest(&quot;.jstree-node&quot;).children(&quot;.jstree-anchor&quot;);<br \/>                            e.target = a[0];<br \/>                            a.trigger(e);<br \/>                        }<br \/>                    })<\/p>","body":""},"isPrivate":false,"ignore":true}]